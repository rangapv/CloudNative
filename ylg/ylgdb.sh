#!/bin/bash
#author: rangapv@yahoo.com 15-04-23
#updated database by adding a field tag on 08-05-23

declare -A spec
declare -A value
declare -A tag


spec[1]="apiVersion:"
value[1]="Version"
tag[1]="1"
spec[2]="kind:"
value[2]="kind"
tag[2]="1"
spec[3]="metadata:"
value[3]="Metadata For this kind"
tag[3]="0"
spec[3.4]="name:"
value[3.4]="Name for this kind"
tag[3.4]="1"
spec[3.5]="namespace:"
value[3.5]="Namespaces that you want this kind to be deployed"
tag[3.5]="1"
spec[3.6]="labels:"
value[3.6]="labels for this type of kind"
tag[3.6]="0"
spec[3.61]="type:"
value[3.61]="type definitions"
tag[3.61]="1"
spec[3.62]="app:"
value[3.62]="app name to be referenced"
tag[3.62]="1"
spec[3.7]="annotations:"
value[3.7]="The list of annotations for this kind"
tag[3.7]="1"
spec[4]="spec:"
value[4]="spec for the kind Deployment"
tag[4]="0"
spec[4.1]="replicas:"
value[4.1]="Replicas"
tag[4.1]="1"
spec[4.3]="selector:"
value[4.3]="The selector details for the Pod if any"
tag[4.3]="0"
spec[4.31]="matchLabels:"
value[4.31]="The labels for the Pod to match"
tag[4.31]="0"
spec[4.311]="app:"
value[4.311]="The app name for the Pod to match"
tag[4.311]="1"
spec[4.5]="strategy:"
value[4.5]="The container deployment strategy for the Pod"
tag[4.5]="0"
spec[4.51]="rollingUpdate:"
value[4.51]="The update details for the Pod "
tag[4.51]="0"
spec[4.511]="maxSurge:"
value[4.511]="The max surge number for the Pod"
tag[4.511]="1"
spec[4.512]="maxUnavailable:"
value[4.512]="The max Unavailabe details for the Pod"
tag[4.512]="1"
spec[4.52]="type:"
value[4.52]="The strategy type for the Pod"
tag[4.52]="1"
spec[4.6]="template:"
value[4.6]="template"
tag[4.6]="0"
spec[4.61]="metadata:"
value[4.61]="metadata for the container"
tag[4.61]="0"
spec[4.611]="labels:"
value[4.611]="label"
tag[4.611]="0"
spec[4.6111]="app:"
value[4.6111]="app name for the container"
tag[4.6111]="1"
spec[4.7]="revisionHistoryLimit:"
value[4.7]="Enter number of old ReplicaSets to retain to allow rollback(default is 10)"
tag[4.7]="1"
spec[4.8]="minReadySeconds:"
value[4.8]="Minimum number of seconds for it to be considered available"
tag[4.8]="1"
spec[4.9]="progressDeadlineSeconds:"
value[4.9]="maximum time (defaults 600s) for a deployment before it is considered to be failed"
tag[4.9]="1"
spec[5]="spec:"
value[5]="spec for the kind PV/PVC"
tag[5]="0"
spec[5.1]="storageClassName:"
value[5.1]="User defined Name for the Storage Class"
tag[5.1]="1"
spec[5.2]="capacity:"
value[5.2]="Capacity details"
tag[5.2]="0"
spec[5.21]="storage:"
value[5.21]="Mention the amount of Storage details"
tag[5.21]="1"
spec[5.3]="accessModes:"
value[5.3]="The Access Modes that needs to be mentioned Read/Write/ReadWrite etc"
tag[5.3]="0"
spec[5.31]="-"
value[5.31]="The Access Modes Value needs to be mentioned Read/Write/ReadWrite etc"
tag[5.31]="1"
spec[5.4]="nfs:"
value[5.4]="The NEtwrok File Storage Details"
tag[5.4]="0"
spec[5.41]="server:"
value[5.41]="The nfs server IP address"
tag[5.41]="1"
spec[5.42]="path:"
value[5.42]="The NEtwrok File Storage path"
tag[5.42]="1"
spec[5.5]="csi:"
value[5.5]="The csi details for the Storage"
tag[5.5]="0"
spec[5.51]="driver:"
value[5.51]="The Driver details for the Storage"
tag[5.51]="1"
spec[5.52]="volumeHandle:"
value[5.52]="The volume handle details for the Storage(mandatory)"
tag[5.52]="1"
spec[5.7]="resources:"
value[5.7]="The resource Details"
tag[5.7]="0"
spec[5.71]="requests:"
value[5.71]="The requests Details"
tag[5.71]="0"
spec[5.711]="storage:"
value[5.711]="The storage Details(Mb/Gb)"
tag[5.711]="1"
spec[6]="spec:"
value[6]="spec for the kind Service"
tag[6]="0"
spec[6.1]="selector:"
value[6.1]="selector details for the kind Service"
tag[6.1]="0"
spec[6.11]="app:"
value[6.11]="App name for the selector for the kind Service"
tag[6.11]="1"
spec[6.2]="type:"
value[6.2]="Type for the kind Service(ClusterIP/NodePort)"
tag[6.2]="1"
spec[6.3]="ports:"
value[6.3]="Port mapping details for the Service"
tag[6.3]="0"
spec[6.4]="- port:"
value[6.4]="Port mapping details for the Service"
tag[6.4]="1"
spec[6.41]="targetPort:"
value[6.41]="The traget Port Number for the Service"
tag[6.41]="1"
spec[6.42]="nodePort:"
value[6.42]="The NodePort number for the Service"
tag[6.42]="1"
spec[7]="data:"
value[7]="spec of configmap for Prometheus data"
tag[7]="0"
spec[7.1]="prometheus.yml: |"
value[7.1]="The definition file"
tag[7.1]="0"
spec[7.11]="global:"
value[7.11]="The config header"
tag[7.11]="0"
spec[7.111]="scrape_interval:"
value[7.111]="The interval in which you need the metric to be scrapped"
tag[7.111]="1"
spec[7.112]="evaluation_interval:"
value[7.112]="The nterval in which you need the evaluation"
tag[7.112]="1"
spec[7.12]="alerting:"
value[7.12]="The alerting header"
tag[7.12]="0"
spec[7.121]="alertmanagers:"
value[7.121]="The alertmanagers header"
tag[7.121]="1"
spec[7.122]="- static_configs:"
value[7.122]="The static config header"
tag[7.122]="1"
spec[7.1221]="- targets:"
value[7.1221]="The target value header"
tag[7.1221]="1"
spec[7.13]="rule_files:"
value[7.13]="The rules file value"
tag[7.13]="1"
spec[7.14]="scrape_configs:"
value[7.14]="The scrap config values"
tag[7.14]="0"
spec[7.141]="- job_name:"
value[7.141]="The name of the job"
tag[7.141]="1"
spec[7.1411]="static_configs:"
value[7.1411]="The static config details"
tag[7.1411]="0"
spec[7.1412]="- targets:"
value[7.1412]="The Host&Port detail"
tag[7.1412]="1"
spec[8]="provisioner:"
value[8]="spec of provisioner for aws/gcp/azure"
tag[8]="1"
spec[9]="parameters:"
value[9]="spec parameters of provisioner for aws/gcp/azure"
tag[9]="0"
spec[9.1]="type:"
value[9.1]="The storage type for aws/gcp/azure"
tag[9.1]="1"
spec[10]="stringData:"
value[10]="Spec to hold access/secret keys"
tag[10]="0"
spec[10.1]="key_id:"
value[10.1]="Enter the  access key"
tag[10.1]="1"
spec[10.2]="access_key:"
value[10.2]="Enter the  secret key"
tag[10.2]="1"
spec[11.11]="spec:"
value[11.11]="Spec for the container"
tag[11.11]="0"
spec[11.111]="initContainers:"
value[11.111]="The init container details for the Pod if any"
tag[11.111]="0"
spec[11.1111]="- name:"
value[11.1111]="The name for the init container"
tag[11.1111]="1"
spec[11.11111]="image:"
value[11.11111]="The init container image"
tag[11.11111]="1"
spec[11.11112]="command:"
value[11.11112]="The command to be executed for the init container"
tag[11.11112]="1"
spec[11.11113]="volumeMounts:"
value[11.11113]="The volume mounts for the init container"
tag[11.11113]="0"
spec[11.11114]="- name:"
value[11.11114]="Name of the volume mount in init container in the format mountpoints;mountpath "
tag[11.11114]="1"
spec[11.11141]="mountPath:"
value[11.11141]="The mountpath for the volume mount of init container"
tag[11.11141]="0"
spec[11.211]="containers:"
value[11.211]="Containers details"
tag[11.211]="0"
spec[11.2111]="- name:"
value[11.2111]="Name of this Container"
tag[11.2111]="1"
spec[11.21111]="image:"
value[11.21111]="image tag"
tag[11.21111]="1"
spec[11.21112]="args:"
value[11.21112]="args that may be needed to for the container to start/run"
tag[11.21112]="1"
spec[11.21113]="ports:"
value[11.21113]="ports details"
tag[11.21113]="0"
spec[11.211131]="- containerPort:"
value[11.211131]="containerports"
tag[11.211131]="1"
spec[11.21114]="volumeMounts:"
value[11.21114]="Mentions the Volumes in a COMMA seperated for the container mount points"
tag[11.21114]="0"
spec[11.211141]="- name:"
value[11.211141]="Name of the container mount points;mountpath"
tag[11.211141]="1"
spec[11.2111411]="mountPath:"
value[11.2111411]="The container mount points"
tag[11.2111411]="0"
spec[11.511]="volumes:"
value[11.511]="Volume details"
tag[11.511]="0"
spec[11.5111]="- name:"
value[11.5111]="Name of the Volume(configMapName)"
tag[11.5111]="1"
spec[11.51111]="configMap:"
value[11.51111]="Configmap details"
tag[11.51111]="0"
spec[11.511111]="name:"
value[11.511111]="Name fo this Configmap;DefaultMode"
tag[11.511111]="1"
spec[11.511112]="defaultMode:"
value[11.511112]="Config Map permissions"
tag[11.511112]="0"
spec[11.5112]="- name:"
value[11.5112]="Name of the Volume(PersistentVolumeClaim)"
tag[11.5112]="1"
spec[11.51121]="persistentVolumeClaim:"
value[11.51121]="Header of the Volume(PersistentVolumeClaim)"
tag[11.51121]="0"
spec[11.511211]="claimName:"
value[11.511211]="The Claim name of PersistentVolumeClaim"
tag[11.511211]="1"
spec[20.10]="metadata:"
value[20.10]="The Pod metadata like labesl"
tag[20.10]="app"
spec[20.101]="labels:"
value[20.101]="The label for the Pod if any"
tag[20.101]="1"
spec[20.1011]="app:"
value[20.1011]="The app name for the Pod if any"
tag[20.1011]="1"
spec[20.20]="spec:"
value[20.20]="The Pod spec section beigns from here"
tag[20.20]="0"
spec[20.301]="nodeSelector:"
value[20.301]="Selector which must match a node's labels for the pod to be scheduled on that node"
tag[20.301]="1"
spec[20.302]="nodeName:"
value[20.302]="that node assuming that it fits resource requirements"
tag[20.302]="1"
spec[20.303]="restartPolicy:"
value[20.303]="Restart policy for all containers within the pod(Always/OnFailure/Never)"
tag[20.303]="1"
spec[21.101]="affinity:"
value[21.101]="The pods scheduling constraints"
tag[21.101]="0"
spec[21.1011]="nodeAffinity:"
value[21.1011]="node affinity scheduling rules for the pod"
tag[21.1011]="1"
spec[21.1012]="podAffinity:"
value[21.1012]="pod affinity scheduling rules"
tag[21.1012]="1"
spec[21.1013]="podAntiAffinity:"
value[21.1013]="pod anti-affinity scheduling rules"
tag[21.1013]="1"
spec[21.102]="tolerations:"
value[21.102]="is attached to tolerates any taint that matches the triple <key"
tag[21.102]="value"
spec[21.1021]="key:"
value[21.1021]="taint key that the toleration applies to"
tag[21.1021]="1"
spec[21.1022]="value:"
value[21.1022]="taint value the toleration matches to"
tag[21.1022]="1"
spec[21.1023]="effect:"
value[21.1023]="taint effect to match"
tag[21.1023]="1"
spec[21.1024]="operator:"
value[21.1024]="keys relationship to the value(Exists/Equal)"
tag[21.1024]="1"
spec[21.1025]="tolerationSeconds:"
value[21.1025]="period of time the toleration(which must be of effect NoExecute"
tag[21.1025]="or field is ignored) tolerates the taint"
spec[21.103]="schedulerName:"
value[21.103]="pod will be dispatched by specified scheduler"
tag[21.103]="1"
spec[21.104]="runtimeClassName:"
value[21.104]="RuntimeClass object in the node.k8s.io group"
tag[21.104]="1"
spec[21.105]="priorityClassName:"
value[21.105]="indicates the pod's priority(system-node-critical and system-cluster-critical highest or create a PriorityClass object with that name)"
tag[21.105]="1"
spec[21.106]="priority:"
value[21.106]="Pod pritority the higher the value higher the priority"
tag[21.106]="1"
spec[21.107]="preemptionPolicy:"
value[21.107]="Policy for preempting pods(Never PreemptLowerPriority-default)"
tag[21.107]="1"
spec[21.108]="topologySpreadConstraints:"
value[21.108]="how a group of pods ought to spread across topology domains"
tag[21.108]="0"
spec[21.1081]="maxSkew:"
value[21.1081]="degree to which pods may be unevenly distributed(integer)"
tag[21.1081]="1"
spec[21.1082]="topologyKey:"
value[21.1082]="the key of node labels(string)"
tag[21.1082]="1"
spec[21.1083]="whenUnsatisfiable:"
value[21.1083]="how to deal with a pod if it doesn't satisfy the spread constraint(ScheduleAnyway DoNotSchedule-default)"
tag[21.1083]="1"
spec[21.1084]="labelSelector:"
value[21.1084]="used to find matching pods(labelSelector)"
tag[21.1084]="1"
spec[21.1085]="matchLabelKeys:"
value[21.1085]="pod label keys to select the pods over which spreading will be calculated"
tag[21.1085]="1"
spec[21.1086]="minDomains:"
value[21.1086]="minimum number of eligible domains"
tag[21.1086]="1"
spec[21.1087]="nodeAffinityPolicy:"
value[21.1087]="how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew(Honor/Ignore)"
tag[21.1087]="1"
spec[21.1088]="nodeTaintsPolicy:"
value[21.1088]="how we will treat node taints when calculating pod topology spread skew(Honor/Ignore)"
tag[21.1088]="1"
spec[21.1089]="overhead"
value[21.1089]="This field will be autopopulated at admission time by the RuntimeClass admission controller"
tag[21.1089]="0"
spec[21.109]="terminationGracePeriodSeconds:"
value[21.109]="Optional duration in seconds the pod needs to terminate gracefully(0 means KILL SIgnal)"
tag[21.109]="1"
spec[21.110]="activeDeadlineSeconds:"
value[21.110]="in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill"
tag[21.110]="1"
spec[21.111]="readinessGates:"
value[21.111]="valuated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates"
tag[21.111]="0"
spec[21.1111]="conditionType:"
value[21.1111]="condition in the pods condition list with matching type"
tag[21.1111]="1"
spec[22.101]="hostname:"
value[22.101]="Specifies the hostname of the Pod(pods hostname will be set to a system-defined value)"
tag[22.101]="1"
spec[22.102]="setHostnameAsFQDN:"
value[22.102]="pods hostname will be configured as the pods FQDN(Boolean leaf-name is default)"
tag[22.102]="1"
spec[22.103]="subdomain:"
value[22.103]="fully qualified Pod hostname will be hostname.subdomain.pod namespace.svc.cluster domain(Defailt nothing)"
tag[22.103]="1"
spec[22.104]="hostAliases:"
value[22.104]="optional list of hosts and IPs that will be injected into the pod's hosts file if specified"
tag[22.104]="0"
spec[22.1041]="hostnames:"
value[22.1041]="Hostnames for the above IP address"
tag[22.1041]="1"
spec[22.1042]="ip:"
value[22.1042]="IP address of the host file entry"
tag[22.1042]="1"
spec[22.105]="dnsConfig:"
value[22.105]="DNS parameters of a pod"
tag[22.105]="0"
spec[22.1051]="nameservers:"
value[22.1051]="DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy"
tag[22.1051]="1"
spec[22.1052]="options:"
value[22.1052]="list of DNS resolver options. This will be merged with the base options generated from DNSPolicy"
tag[22.1052]="1"
spec[22.10521]="name:"
value[22.10521]="PodDNSConfigOption Name"
tag[22.10521]="1"
spec[22.10522]="value:"
value[22.10522]="PodDNSConfigOption Value"
tag[22.10522]="1"
spec[22.1053]="searches:"
value[22.1053]="DNS search domains for host-name lookup"
tag[22.1053]="1"
spec[22.106]="dnsPolicy:"
value[22.106]="DNS policy for the pod. Defaults to ClusterFirst. values(ClusterFirstWithHostNet/ClusterFirst/Default/None)"
tag[22.106]="1"
spec[23.101]="hostNetwork:"
value[23.101]="Host networking requested for this pod. Use the host's network namespace(Boolean default-false)"
tag[23.101]="1"
spec[23.102]="hostPID:"
value[23.102]="host's pid namespace.(Boolean default-false)"
tag[23.102]="1"
spec[23.103]="hostIPC:"
value[23.103]="host's ipc namespace(Boolean default-false)"
tag[23.103]="1"
spec[23.104]="shareProcessNamespace:"
value[23.104]="Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod(Boolean default-false)"
tag[23.104]="1"
spec[23.105]="serviceAccountName:"
value[23.105]="the name of the ServiceAccount to use to run this pod"
tag[23.105]="1"
spec[23.105]="automountServiceAccountToken:"
value[23.105]="indicates whether a service account token should be automatically mounted(Boolean)"
tag[23.105]="1"
spec[24.101]="securityContext:"
value[24.101]="holds pod-level security attributes and common container settings"
tag[24.101]="0"
spec[24.1011]="runAsUser:"
value[24.1011]="The UID to run the entrypoint of the container process(int)"
tag[24.1011]="1"
spec[24.1012]="runAsNonRoot:"
value[24.1012]="container must run as a non-root user(Boolean)"
tag[24.1012]="1"
spec[24.1013]="runAsGroup:"
value[24.1013]="GID to run the entrypoint of the container process(int)"
tag[24.1013]="1"
spec[24.1014]="supplementalGroups:"
value[24.1014]="list of groups applied to the first process run in each container(int)"
tag[24.1014]="1"
spec[24.1015]="fsGroup:"
value[24.1015]="special supplemental group that applies to all containers in a pod"
tag[24.1015]="1"
spec[24.1016]="fsGroupChangePolicy:"
value[24.1016]="defines behavior of changing ownership and permission of the volume before being exposed inside Pod(OnRootMismatch/Always)"
tag[24.1016]="1"
spec[24.1017]="seccompProfile:"
value[24.1017]="seccomp options to use by the containers in this pod"
tag[24.1017]="0"
spec[24.10171]="type:"
value[24.10171]="indicates which kind of seccomp profile will be applied(Localhost/RuntimeDefault/Unconfined)"
tag[24.10171]="1"
spec[24.10172]="localhostProfile:"
value[24.10172]="indicates a profile defined in a file on the node should be used(string)"
tag[24.10172]="1"
spec[24.1018]="seLinuxOptions:"
value[24.1018]="SELinux context to be applied to all containers"
tag[24.1018]="1"
spec[24.10181]="level:"
value[24.10181]="SELinux level label that applies to the container"
tag[24.10181]="1"
spec[24.10182]="role:"
value[24.10182]="SELinux role label that applies to the container"
tag[24.10182]="1"
spec[24.10183]="type:"
value[24.10183]="SELinux type label that applies to the container"
tag[24.10183]="1"
spec[24.10184]="user:"
value[24.10184]="SELinux user label that applies to the container"
tag[24.10184]="1"
spec[24.1019]="sysctls:"
value[24.1019]="Sysctls hold a list of namespaced sysctls used for the pod"
tag[24.1019]="0"
spec[24.10191]="name:"
value[24.10191]="Name of a property to set(Sysctl defines a kernel parameter to be set)"
tag[24.10191]="1"
spec[24.10192]="value:"
value[24.10192]="Value of a property to set(Sysctl defines a kernel parameter to be set)"
tag[24.10192]="1"
spec[24.1020]="windowsOptions:"
value[24.1020]="Windows specific settings applied to all containers."
tag[24.1020]="0"
spec[24.10201]="hostProcess:"
value[24.10201]="HostProcess determines if a container should be run as a Host Process container(Boolean)"
tag[24.10201]="1"
spec[24.10202]="runAsUserName:"
value[24.10202]="UserName in Windows to run the entrypoint of the container process."
tag[24.10202]="1"
spec[25.101]="initContainers:"
value[25.101]="The init container details for the Pod if any"
tag[25.101]="0"
spec[25.1011]="- name:"
value[25.1011]="The name for the init container"
tag[25.1011]="1"
spec[25.10111]="image:"
value[25.10111]="The init container image"
tag[25.10111]="1"
spec[25.10112]="command:"
value[25.10112]="The command to be executed for the init container"
tag[25.10112]="1"
spec[25.10113]="volumeMounts:"
value[25.10113]="The volume mounts for the init container"
tag[25.10113]="1"
spec[25.10114]="- name:"
value[25.10114]="Name of the volume mount in init container in the format mountpoints;mountpath"
tag[25.10114]="1"
spec[25.101141]="mountPath:"
value[25.101141]="The mountpath for the volume mount of init container"
tag[25.101141]="0"
spec[26.100]="containers:"
value[26.100]="Spec for containers"
tag[26.100]="0"
spec[26.101]="- name:"
value[26.101]="Name of the container"
tag[26.101]="1"
spec[26.1011]="image:"
value[26.1011]="Container image name"
tag[26.1011]="1"
spec[26.1012]="imagePullPolicy:"
value[26.1012]="Image pull policy(Always"
tag[26.1012]="Never"
spec[26.1013]="command:"
value[26.1013]="Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided"
tag[26.1013]="1"
spec[26.1014]="args:"
value[26.1014]="Arguments to the entrypoint. The container image's CMD is used if this is not provided"
tag[26.1014]="1"
spec[26.1015]="workingDir:"
value[26.1015]="Container's working directory.(Default-the container runtime's default will be used)"
tag[26.1015]="1"
spec[26.1016]="env:"
value[26.1016]="List of environment variables to set in the container"
tag[26.1016]="0"
spec[26.10161]="name:"
value[26.10161]="Name of the environment variable"
tag[26.10161]="1"
spec[26.10162]="value:"
value[26.10162]="are expanded using the previously defined environment variables in the container and any service environment variables"
tag[26.10162]="1"
spec[26.10163]="valueFrom:"
value[26.10163]="Source for the environment variable's value. Cannot be used if value is not empty."
tag[26.10163]="0"
spec[26.101631]="configMapKeyRef:"
value[26.101631]="Selects a key from a ConfigMap"
tag[26.101631]="0"
spec[26.1016311]="key:"
value[26.1016311]="configMapKeyRef key to select"
tag[26.1016311]="1"
spec[26.1016312]="name:"
value[26.1016312]="configMapKeyRef Name of the referent"
tag[26.1016312]="1"
spec[26.1016313]="optional:"
value[26.1016313]="Specify whether the ConfigMap or its key must be defined(Boolean)"
tag[26.1016313]="1"
spec[26.101632]="fieldRef:"
value[26.101632]="Selects a field of the pod(supports metadata.name/metadata.namespace/metadata.labels/status.podIPs)"
tag[26.101632]="1"
spec[26.101633]="resourceFieldRef:"
value[26.101633]="Selects a resource of the container(linits Request are supported)"
tag[26.101633]="1"
spec[26.101634]="secretKeyRef:"
value[26.101634]="Selects a key of a secret in the pod's namespace"
tag[26.101634]="0"
spec[26.1016341]="key:"
value[26.1016341]="key of the secret to select from"
tag[26.1016341]="1"
spec[26.1016342]="name:"
value[26.1016342]="Name of the referent of secretKeyRef"
tag[26.1016342]="1"
spec[26.1016343]="optional:"
value[26.1016343]="Specify whether secretKeyRef's Secret or its key must be defined"
tag[26.1016343]="1"
spec[26.1017]="envFrom:"
value[26.1017]="EnvFromSource represents the source of a set of ConfigMap"
tag[26.1017]="0"
spec[26.10171]="configMapRef:"
value[26.10171]="ConfigMap to select from"
tag[26.10171]="0"
spec[26.101711]="name:"
value[26.101711]="ConfigMap name to select from"
tag[26.101711]="1"
spec[26.101712]="optional:"
value[26.101712]="Specify whether the ConfigMap must be defined(Boolean)"
tag[26.101712]="1"
spec[26.10172]="prefix:"
value[26.10172]="An optional identifier to prepend to each key in the ConfigMap"
tag[26.10172]="0"
spec[26.10173]="secretRef:"
value[26.10173]="*SecretEnvSource selects a Secret to populate the environment variables with."
tag[26.10173]="0"
spec[26.101731]="name:"
value[26.101731]="SecretEnvSource name"
tag[26.101731]="1"
spec[26.101732]="optional:"
value[26.101732]="Specify whether the Secret must be defined(Boolean)"
tag[26.101732]="1"
spec[26.1018]="ports:"
value[26.1018]="List of ports to expose from the container"
tag[26.1018]="0"
spec[26.10181]="containerPort:"
value[26.10181]="Port number to expose on the pods IP address(o-65536)"
tag[26.10181]="1"
spec[26.10182]="hostIP:"
value[26.10182]="host IP to bind the external port to."
tag[26.10182]="1"
spec[26.10183]="hostPort:"
value[26.10183]="port number to expose on the host(If HostNetwork is specified"
tag[26.10183]=" this must match ContainerPort. Most containers do not need this)"
spec[26.10184]="name:"
value[26.10184]="Each named port in a pod must have a unique name"
tag[26.10184]="1"
spec[26.10185]="protocol:"
value[26.10185]="Protocol for port. (UDP/TCP/SCTP Defaults to TCP)"
tag[26.10185]="1"
spec[26.1019]="volumeMounts:"
value[26.1019]="Pod volumes to mount into the container's filesystem"
tag[26.1019]="0"
spec[26.10191]="mountPath:"
value[26.10191]="Path within the container at which the volume should be mounted. Must not contain colon"
tag[26.10191]="1"
spec[26.10192]="name:"
value[26.10192]="NAme of the Volume"
tag[26.10192]="1"
spec[26.10193]="mountPropagation:"
value[26.10193]="determines how mounts are propagated from the host to container and the other way around"
tag[26.10193]="1"
spec[26.10194]="readOnly:"
value[26.10194]="Mount volume value read-only if true"
tag[26.10194]=" read-write otherwise (false or unspecified). Defaults to false."
spec[26.10195]="subPath:"
value[26.10195]="Path within the volume from which the container's volume should be mounted.(Default to toor)"
tag[26.10195]="1"
spec[26.10196]="subPathExpr:"
value[26.10196]="Expanded path within the volume from which the container's volume should be mounted."
tag[26.10196]="1"
spec[26.1020]="volumeDevices:"
value[26.1020]="volumeDevices is the list of block devices to be used by the container."
tag[26.1020]="0"
spec[26.10201]="devicePath:"
value[26.10201]="devicePath is the path inside of the container that the device will be mapped to"
tag[26.10201]="1"
spec[26.10202]="name:"
value[26.10202]="name must match the name of a persistentVolumeClaim in the pod"
tag[26.10202]="1"
spec[27.1021]="resources:"
value[27.1021]="Compute Resources required by this container"
tag[27.1021]="0"
spec[27.10211]="claims:"
value[27.10211]="Claims lists the names of resources defined in spec.resourceClaims that are used by this container"
tag[27.10211]="0"
spec[27.102111]="name:"
value[27.102111]="Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used"
tag[27.102111]="1"
spec[27.10212]="limits:"
value[27.10212]="Limits describes the maximum amount of compute resources allowed"
tag[27.10212]="0"
spec[27.10213]="requests:"
value[27.10213]="Requests describes the minimum amount of compute resources required"
tag[27.10213]="0"
spec[27.1022]="resizePolicy:"
value[27.1022]="Resources resize policy for the container"
tag[27.1022]="0"
spec[27.10221]="resourceName:"
value[27.10221]="Name of the resource to which this resource resize policy applies(cpu/memory)"
tag[27.10221]="1"
spec[27.10222]="restartPolicy:"
value[27.10222]="Restart policy to apply when specified resource is resized"
tag[27.10222]="1"
spec[27.1023]="lifecycle:"
value[27.1023]="Lifecycle describes actions that the management system should take in response to container lifecycle events"
tag[27.1023]="0"
spec[27.10231]="postStart:"
value[27.10231]="PostStart is called immediately after a container is created. If the handler fails the container is terminated and restarted according to its restart policy"
tag[27.10231]="0"
spec[27.10232]="preStop:"
value[27.10232]="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure"
tag[27.10232]="0"
spec[27.1024]="terminationMessagePath:"
value[27.1024]="Path at which the file to which the container's termination message will be written is mounted into the container's filesystem"
tag[27.1024]="1"
spec[27.1026]="livenessProbe:"
value[27.1026]="Periodic probe of container liveness"
tag[27.1026]="1"
spec[27.1027]="readinessProbe:"
value[27.1027]="Periodic probe of container service readiness"
tag[27.1027]="1"
spec[27.1028]="startupProbe:"
value[27.1028]="StartupProbe indicates that the Pod has successfully initialized. If specified then no other probes are executed until this completes successfully"
tag[27.1028]="1"
spec[27.1029]="securityContext:"
value[27.1029]="SecurityContext holds security configuration that will be applied to a container."
tag[27.1029]="0"
spec[27.10291]="runAsUser:"
value[27.10291]="The UID to run the entrypoint of the container process"
tag[27.10291]="1"
spec[27.10292]="runAsNonRoot:"
value[27.10292]="Indicates that the container must run as a non-root user(Boolean)"
tag[27.10292]="1"
spec[27.10293]="runAsGroup:"
value[27.10293]="GID to run the entrypoint of the container process(int)"
tag[27.10293]="1"
spec[27.10294]="readOnlyRootFilesystem:"
value[27.10294]="Whether this container has a read-only root filesystem(Boolean)"
tag[27.10294]="1"
spec[27.10295]="procMount:"
value[27.10295]="type of proc mount to use for the containers(string)"
tag[27.10295]="1"
spec[27.10296]="privileged:"
value[27.10296]="Run container in privileged mode(priviliged)"
tag[27.10296]="1"
spec[27.10297]="allowPrivilegeEscalation:"
value[27.10297]="AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process(Boolean)"
tag[27.10297]="1"
spec[27.10298]="capabilities:"
value[27.10298]="Adds and removes POSIX capabilities from running containers."
tag[27.10298]="0"
spec[27.102981]="add:"
value[27.102981]="Adds POSIX capabilities"
tag[27.102981]="1"
spec[27.102982]="drop:"
value[27.102982]="remove POSIX capabilities"
tag[27.102982]="1"
spec[27.10299]="seccompProfile:"
value[27.10299]="SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set"
tag[27.10299]="0"
spec[27.102991]="type:"
value[27.102991]="type indicates which kind of seccomp profile will be applied(localhost/RuntimeDefault/Unconfined)"
tag[27.102991]="1"
spec[27.102992]="localhostProfile:"
value[27.102992]="localhostProfile indicates a profile defined in a file on the node should be used"
tag[27.102992]="1"
spec[27.10300]="seLinuxOptions:"
value[27.10300]="SELinux context to be applied to the container"
tag[27.10300]="0"
spec[27.103001]="level:"
value[27.103001]="Level is SELinux level label that applies to the container(string)"
tag[27.103001]="1"
spec[27.103002]="role:"
value[27.103002]="Role is a SELinux role label that applies to the container(string)"
tag[27.103002]="1"
spec[27.103003]="type:"
value[27.103003]="Type is a SELinux type label that applies to the container(string)"
tag[27.103003]="1"
spec[27.103004]="user:"
value[27.103004]="User is a SELinux user label that applies to the container(string)"
tag[27.103004]="1"
spec[27.10301]="windowsOptions:"
value[27.10301]="WindowsSecurityContextOptions contain Windows-specific options and credentials"
tag[27.10301]="1"
spec[27.103011]="hostProcess:"
value[27.103011]="HostProcess determines if a container should be run as a 'Host Process' container(Boolean)"
tag[27.103011]="1"
spec[27.103012]="runAsUserName:"
value[27.103012]="UserName in Windows to run the entrypoint of the container process(string)"
tag[27.103012]="1"
spec[27.1205]="terminationMessagePolicy:"
value[27.1205]="Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure."
tag[27.1205]="1"
spec[29.100]="volumes:"
value[29.100]="List of volumes that can be mounted by containers belonging to the pod"
tag[29.100]="0"
spec[29.101]="- name:"
value[29.101]="The name to refer for this volume"
tag[29.101]="1"
spec[29.1011]="gitRepo:"
value[29.1011]="The gitRepo details"
tag[29.1011]="0"
spec[29.10111]="repository:"
value[29.10111]="The git repo is a string"
tag[29.10111]="1"
spec[29.10112]="revision:"
value[29.10112]="The revision is a string"
tag[29.10112]="1"
spec[29.1012]="hostPath:"
value[29.1012]="A hostPath volume mounts a file or directory from the host node's filesystem into your Pod"
tag[29.1012]="0"
spec[29.10121]="path:"
value[29.10121]="The valid path of the localhost"
tag[29.10121]="1"
spec[29.10122]="type:"
value[29.10122]="The valid entries are(File/Directory/socket/BlockDevice/charDevice/FilelOrCreate/DirectoryOrCreate/empty)"
tag[29.10122]="1"
spec[29.1013]="nfs:"
value[29.1013]="NFS server running with the share exported"
tag[29.1013]="0"
spec[29.10131]="server:"
value[29.10131]="The nfs server details"
tag[29.10131]="1"
spec[29.10132]="path:"
value[29.10132]="The nfs path"
tag[29.10132]="1"
spec[29.10133]="readOnly:The boolean value"
value[29.10133]="1"
tag[29.10133]=""
spec[29.1014]="persistentVolumeClaim:"
value[29.1014]="The persistenVolumeCalim that was created"
tag[29.1014]="0"
spec[29.10141]="claimName:"
value[29.10141]="The claim name"
tag[29.10141]="1"
spec[29.1015]="configMap:"
value[29.1015]="The ConfigMap details"
tag[29.1015]="0"
spec[29.10151]="name:"
value[29.10151]="The configmap name"
tag[29.10151]="1"
spec[29.10152]="defaultMode:"
value[29.10152]="The mode of access"
tag[29.10152]="1"
spec[29.1016]="csi:"
value[29.1016]="The out-of-tree csi driver details"
tag[29.1016]="0"
spec[29.10161]="driver:"
value[29.10161]="A string value that specifies the name of the volume driver to use"
tag[29.10161]="1"
spec[29.10162]="volumeAttributes:"
value[29.10162]="A map of string to string that specifies static properties of a volume"
tag[29.10162]="1"
spec[29.10163]="volumeHandle:"
value[29.10163]="A string value that uniquely identifies the volume"
tag[29.10163]="1"
spec[29.10164]="fsType:"
value[29.10164]="If the PV's VolumeMode is Filesystem then this field may be used to specify"
tag[29.10164]="1"
spec[29.10165]="nodePublishSecretRef:"
value[29.10165]="A reference to the secret object containing sensitive information to pass"
tag[29.10165]="1"
spec[29.10166]="nodeStageSecretRef: A reference to the secret object containing sensitive information to pass to the CSI driver"
value[29.10166]="1"
tag[29.10166]=""
spec[29.1017]="cephfs:"
value[29.1017]="The cephfs deatils"
tag[29.1017]="0"
spec[29.10171]="monitors:"
value[29.10171]="The ip adress details in here"
tag[29.10171]="1"
spec[29.10172]="user:"
value[29.10172]="The authorized user login"
tag[29.10172]="1"
spec[29.10173]="secretFile:"
value[29.10173]="The path of the cephfs secret file"
tag[29.10173]="1"
spec[29.10174]="readOnly:"
value[29.10174]="The boolean value for read"
tag[29.10174]="1"
spec[29.1018]="rbd:"
value[29.1018]="The raw block device details"
tag[29.1018]="0"
spec[29.10181]="monitors:"
value[29.10181]="The ip adress details in here"
tag[29.10181]="1"
spec[29.10182]="pool:"
value[29.10182]="The pool details"
tag[29.10182]="1"
spec[29.10183]="image:"
value[29.10183]="The os image details"
tag[29.10183]="1"
spec[29.10184]="fsType:"
value[29.10184]="The file system type"
tag[29.10184]="1"
spec[29.10185]="readOnly:"
value[29.10185]="The access rights for the raw block volume"
tag[29.10185]="1"
spec[29.10186]="user:"
value[29.10186]="The authorized user login"
tag[29.10186]="1"
spec[29.10187]="keyring:"
value[29.10187]="The key ring path"
tag[29.10187]="1"
spec[29.10188]="imageformat:"
value[29.10188]="The image format numerical vale"
tag[29.10188]="1"
spec[29.10189]="imagefeatures:"
value[29.10189]="The image feature(layering etc)"
tag[29.10189]="1"
spec[29.1019]="fc:"
value[29.1019]="The fiber channel details"
tag[29.1019]="0"
spec[29.10191]="targetWWNs:"
value[29.10191]="The WWNs deatils"
tag[29.10191]="1"
spec[29.10192]="lun:"
value[29.10192]="The lun details"
tag[29.10192]="1"
spec[29.10193]="fsType:"
value[29.10193]="The file system type"
tag[29.10193]="1"
spec[29.10194]="readOnly:"
value[29.10194]="The boolean value for readonly"
tag[29.10194]="1"
