#!/usr/bin/env bash
#author: rangapv@yahoo.com 15-04-23
#updated database by adding a field tag on 08-05-23

declare -A spec
declare -A value
declare -A tag


spec[1]="apiVersion:"
value[1]="Version"
tag[1]="1"
spec[2]="kind:"
value[2]="kind"
tag[2]="1"
spec[3]="metadata:"
value[3]="Metadata For this kind"
tag[3]="0"
spec[3.4]="name:"
value[3.4]="Name for this kind"
tag[3.4]="1"
spec[3.5]="namespace:"
value[3.5]="Namespaces that you want this kind to be deployed"
tag[3.5]="1"
spec[3.6]="labels:"
value[3.6]="labels for this type of kind"
tag[3.6]="0"
spec[3.61]="type:"
value[3.61]="type definitions"
tag[3.61]="1"
spec[3.62]="app:"
value[3.62]="app name to be referenced"
tag[3.62]="1"
spec[3.7]="annotations:"
value[3.7]="The list of annotations for this kind"
tag[3.7]="1"
spec[4]="spec:"
value[4]="spec for the kind Deployment"
tag[4]="0"
spec[4.1]="replicas:"
value[4.1]="Replicas"
tag[4.1]="1"
spec[4.3]="selector:"
value[4.3]="The selector details for the Pod if any"
tag[4.3]="0"
spec[4.31]="matchLabels:"
value[4.31]="The labels for the Pod to match"
tag[4.31]="0"
spec[4.311]="app:"
value[4.311]="The app name for the Pod to match"
tag[4.311]="1"
spec[4.5]="strategy:"
value[4.5]="The container deployment strategy for the Pod"
tag[4.5]="0"
spec[4.51]="rollingUpdate:"
value[4.51]="The update details for the Pod "
tag[4.51]="0"
spec[4.511]="maxSurge:"
value[4.511]="The max surge number for the Pod"
tag[4.511]="1"
spec[4.512]="maxUnavailable:"
value[4.512]="The max Unavailabe details for the Pod"
tag[4.512]="1"
spec[4.52]="type:"
value[4.52]="The strategy type for the Pod"
tag[4.52]="1"
spec[4.7]="revisionHistoryLimit:"
value[4.7]="Enter number of old ReplicaSets to retain to allow rollback(default is 10)"
tag[4.7]="1"
spec[4.8]="minReadySeconds:"
value[4.8]="Minimum number of seconds for it to be considered available"
tag[4.8]="1"
spec[4.9]="progressDeadlineSeconds:"
value[4.9]="maximum time (defaults 600s) for a deployment before it is considered to be failed"
tag[4.9]="1"
spec[5]="spec:"
value[5]="spec for the kind PV/PVC"
tag[5]="0"
spec[5.1]="storageClassName:"
value[5.1]="User defined Name for the Storage Class"
tag[5.1]="1"
spec[5.2]="capacity:"
value[5.2]="Capacity details"
tag[5.2]="0"
spec[5.21]="storage:"
value[5.21]="Mention the amount of Storage details"
tag[5.21]="1"
spec[5.3]="accessModes:"
value[5.3]="The Access Modes that needs to be mentioned Read/Write/ReadWrite etc"
tag[5.3]="0"
spec[5.31]="-"
value[5.31]="The Access Modes Value needs to be mentioned Read/Write/ReadWrite etc"
tag[5.31]="1"
spec[5.4]="nfs:"
value[5.4]="The NEtwrok File Storage Details"
tag[5.4]="0"
spec[5.41]="server:"
value[5.41]="The nfs server IP address"
tag[5.41]="1"
spec[5.42]="path:"
value[5.42]="The NEtwrok File Storage path"
tag[5.42]="1"
spec[5.5]="csi:"
value[5.5]="The csi details for the Storage"
tag[5.5]="0"
spec[5.51]="driver:"
value[5.51]="The Driver details for the Storage"
tag[5.51]="1"
spec[5.52]="volumeHandle:"
value[5.52]="The volume handle details for the Storage(mandatory)"
tag[5.52]="1"
spec[5.7]="resources:"
value[5.7]="The resource Details"
tag[5.7]="0"
spec[5.71]="requests:"
value[5.71]="The requests Details"
tag[5.71]="0"
spec[5.711]="storage:"
value[5.711]="The storage Details(Mb/Gb)"
tag[5.711]="1"
spec[6]="spec:"
value[6]="spec for the kind Service"
tag[6]="0"
spec[6.1]="selector:"
value[6.1]="selector details for the kind Service"
tag[6.1]="0"
spec[6.11]="app:"
value[6.11]="App name for the selector for the kind Service"
tag[6.11]="1"
spec[6.2]="type:"
value[6.2]="Type for the kind Service(ClusterIP/NodePort)"
tag[6.2]="1"
spec[6.3]="ports:"
value[6.3]="Port mapping details for the Service"
tag[6.3]="0"
spec[6.4]="- port:"
value[6.4]="Port mapping details for the Service"
tag[6.4]="1"
spec[6.41]="targetPort:"
value[6.41]="The traget Port Number for the Service"
tag[6.41]="1"
spec[6.42]="nodePort:"
value[6.42]="The NodePort number for the Service"
tag[6.42]="1"
spec[7]="data:"
value[7]="spec of configmap for Prometheus data"
tag[7]="0"
spec[7.1]="prometheus.yml: |"
value[7.1]="The definition file"
tag[7.1]="0"
spec[7.11]="global:"
value[7.11]="The config header"
tag[7.11]="0"
spec[7.111]="scrape_interval:"
value[7.111]="The interval in which you need the metric to be scrapped"
tag[7.111]="1"
spec[7.112]="evaluation_interval:"
value[7.112]="The nterval in which you need the evaluation"
tag[7.112]="1"
spec[7.12]="alerting:"
value[7.12]="The alerting header"
tag[7.12]="0"
spec[7.121]="alertmanagers:"
value[7.121]="The alertmanagers header"
tag[7.121]="1"
spec[7.122]="- static_configs:"
value[7.122]="The static config header"
tag[7.122]="1"
spec[7.1221]="- targets:"
value[7.1221]="The target value header"
tag[7.1221]="1"
spec[7.13]="rule_files:"
value[7.13]="The rules file value"
tag[7.13]="1"
spec[7.14]="scrape_configs:"
value[7.14]="The scrap config values"
tag[7.14]="0"
spec[7.141]="- job_name:"
value[7.141]="The name of the job"
tag[7.141]="1"
spec[7.1411]="static_configs:"
value[7.1411]="The static config details"
tag[7.1411]="0"
spec[7.1412]="- targets:"
value[7.1412]="The Host&Port detail"
tag[7.1412]="1"
spec[8]="provisioner:"
value[8]="spec of provisioner for aws/gcp/azure"
tag[8]="1"
spec[9]="parameters:"
value[9]="spec parameters of provisioner for aws/gcp/azure"
tag[9]="0"
spec[9.1]="type:"
value[9.1]="The storage type for aws/gcp/azure"
tag[9.1]="1"
spec[10]="stringData:"
value[10]="Spec to hold access/secret keys"
tag[10]="0"
spec[10.1]="key_id:"
value[10.1]="Enter the  access key"
tag[10.1]="1"
spec[10.2]="access_key:"
value[10.2]="Enter the  secret key"
tag[10.2]="1"
spec[11.11]="spec:"
value[11.11]="Spec for the container"
tag[11.11]="0"
spec[11.111]="initContainers:"
value[11.111]="The init container details for the Pod if any"
tag[11.111]="0"
spec[11.1111]="- name:"
value[11.1111]="The name for the init container"
tag[11.1111]="1"
spec[11.11111]="image:"
value[11.11111]="The init container image"
tag[11.11111]="1"
spec[11.11112]="command:"
value[11.11112]="The command to be executed for the init container"
tag[11.11112]="1"
spec[11.11113]="volumeMounts:"
value[11.11113]="The volume mounts for the init container"
tag[11.11113]="0"
spec[11.11114]="- name:"
value[11.11114]="Name of the volume mount in init container in the format mountpoints;mountpath "
tag[11.11114]="1"
spec[11.11141]="mountPath:"
value[11.11141]="The mountpath for the volume mount of init container"
tag[11.11141]="1"
spec[11.211]="containers:"
value[11.211]="Containers details"
tag[11.211]="0"
spec[11.2111]="- name:"
value[11.2111]="Name of this Container"
tag[11.2111]="1"
spec[11.21111]="image:"
value[11.21111]="image tag"
tag[11.21111]="1"
spec[11.21112]="args:"
value[11.21112]="args that may be needed to for the container to start/run"
tag[11.21112]="1"
spec[11.21113]="ports:"
value[11.21113]="ports details"
tag[11.21113]="0"
spec[11.211131]="- containerPort:"
value[11.211131]="containerports"
tag[11.211131]="1"
spec[11.21114]="volumeMounts:"
value[11.21114]="Mentions the Volumes in a COMMA seperated for the container mount points"
tag[11.21114]="0"
spec[11.211141]="- name:"
value[11.211141]="Name of the container mount points;mountpath"
tag[11.211141]="1"
spec[11.2111411]="mountPath:"
value[11.2111411]="The container mount points"
tag[11.2111411]="0"
spec[11.511]="volumes:"
value[11.511]="Volume details"
tag[11.511]="0"
spec[11.5111]="- name:"
value[11.5111]="Name of the Volume(configMapName)"
tag[11.5111]="1"
spec[11.51111]="configMap:"
value[11.51111]="Configmap details"
tag[11.51111]="0"
spec[11.511111]="name:"
value[11.511111]="Name fo this Configmap;DefaultMode"
tag[11.511111]="1"
spec[11.511112]="defaultMode:"
value[11.511112]="Config Map permissions"
tag[11.511112]="0"
spec[11.5112]="- name:"
value[11.5112]="Name of the Volume(PersistentVolumeClaim)"
tag[11.5112]="1"
spec[11.51121]="persistentVolumeClaim:"
value[11.51121]="Header of the Volume(PersistentVolumeClaim)"
tag[11.51121]="0"
spec[11.511211]="claimName:"
value[11.511211]="The Claim name of PersistentVolumeClaim"
tag[11.511211]="1"
spec[20.1]="template:"
value[20.1]="Details for PODS begin here- template"
tag[20.1]="0"
spec[20.10]="metadata:"
value[20.10]="The Pod metadata like labels"
tag[20.10]="0"
spec[20.101]="labels:"
value[20.101]="The label for the Pod if any"
tag[20.101]="1"
spec[20.1011]="app:"
value[20.1011]="The app name for the Pod if any"
tag[20.1011]="1"
spec[20.20]="spec:"
value[20.20]="The Pod spec section beigns from here"
tag[20.20]="0"
spec[20.301]="nodeSelector:"
value[20.301]="Selector which must match a node's labels for the pod to be scheduled on that node"
tag[20.301]="1"
spec[20.302]="nodeName:"
value[20.302]="that node assuming that it fits resource requirements"
tag[20.302]="1"
spec[20.303]="restartPolicy:"
value[20.303]="Restart policy for all containers within the pod(Always/OnFailure/Never)"
tag[20.303]="1"
spec[21.101]="affinity:"
value[21.101]="spec for PODS affinity-taints- like scheduling constraints etc"
tag[21.101]="0"
spec[21.1011]="nodeAffinity:"
value[21.1011]="node affinity scheduling rules for the pod"
tag[21.1011]="1"
spec[21.1012]="podAffinity:"
value[21.1012]="pod affinity scheduling rules"
tag[21.1012]="1"
spec[21.1013]="podAntiAffinity:"
value[21.1013]="pod anti-affinity scheduling rules"
tag[21.1013]="1"
spec[21.102]="tolerations:"
value[21.102]="is attached to tolerates any taint that matches the triple <key"
tag[21.102]="value"
spec[21.1021]="key:"
value[21.1021]="taint key that the toleration applies to"
tag[21.1021]="1"
spec[21.1022]="value:"
value[21.1022]="taint value the toleration matches to"
tag[21.1022]="1"
spec[21.1023]="effect:"
value[21.1023]="taint effect to match"
tag[21.1023]="1"
spec[21.1024]="operator:"
value[21.1024]="keys relationship to the value(Exists/Equal)"
tag[21.1024]="1"
spec[21.1025]="tolerationSeconds:"
value[21.1025]="period of time the toleration(which must be of effect NoExecute"
tag[21.1025]="or field is ignored) tolerates the taint"
spec[21.103]="schedulerName:"
value[21.103]="pod will be dispatched by specified scheduler"
tag[21.103]="1"
spec[21.104]="runtimeClassName:"
value[21.104]="RuntimeClass object in the node.k8s.io group"
tag[21.104]="1"
spec[21.105]="priorityClassName:"
value[21.105]="indicates the pod's priority(system-node-critical and system-cluster-critical highest or create a PriorityClass object with that name)"
tag[21.105]="1"
spec[21.106]="priority:"
value[21.106]="Pod pritority the higher the value higher the priority"
tag[21.106]="1"
spec[21.107]="preemptionPolicy:"
value[21.107]="Policy for preempting pods(Never PreemptLowerPriority-default)"
tag[21.107]="1"
spec[21.108]="topologySpreadConstraints:"
value[21.108]="how a group of pods ought to spread across topology domains"
tag[21.108]="0"
spec[21.1081]="maxSkew:"
value[21.1081]="degree to which pods may be unevenly distributed(integer)"
tag[21.1081]="1"
spec[21.1082]="topologyKey:"
value[21.1082]="the key of node labels(string)"
tag[21.1082]="1"
spec[21.1083]="whenUnsatisfiable:"
value[21.1083]="how to deal with a pod if it doesn't satisfy the spread constraint(ScheduleAnyway DoNotSchedule-default)"
tag[21.1083]="1"
spec[21.1084]="labelSelector:"
value[21.1084]="used to find matching pods(labelSelector)"
tag[21.1084]="1"
spec[21.1085]="matchLabelKeys:"
value[21.1085]="pod label keys to select the pods over which spreading will be calculated"
tag[21.1085]="1"
spec[21.1086]="minDomains:"
value[21.1086]="minimum number of eligible domains"
tag[21.1086]="1"
spec[21.1087]="nodeAffinityPolicy:"
value[21.1087]="how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew(Honor/Ignore)"
tag[21.1087]="1"
spec[21.1088]="nodeTaintsPolicy:"
value[21.1088]="how we will treat node taints when calculating pod topology spread skew(Honor/Ignore)"
tag[21.1088]="1"
spec[21.1089]="overhead"
value[21.1089]="This field will be autopopulated at admission time by the RuntimeClass admission controller"
tag[21.1089]="0"
spec[21.109]="terminationGracePeriodSeconds:"
value[21.109]="Optional duration in seconds the pod needs to terminate gracefully(0 means KILL SIgnal)"
tag[21.109]="1"
spec[21.110]="activeDeadlineSeconds:"
value[21.110]="in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill"
tag[21.110]="1"
spec[21.111]="readinessGates:"
value[21.111]="valuated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates"
tag[21.111]="0"
spec[21.1111]="conditionType:"
value[21.1111]="condition in the pods condition list with matching type"
tag[21.1111]="1"
spec[22.101]="hostname:"
value[22.101]="spec for PODS host-details- Specifies the hostname of the Pod(pods hostname will be set to a system-defined value)"
tag[22.101]="1"
spec[22.102]="setHostnameAsFQDN:"
value[22.102]="pods hostname will be configured as the pods FQDN(Boolean leaf-name is default)"
tag[22.102]="1"
spec[22.103]="subdomain:"
value[22.103]="fully qualified Pod hostname will be hostname.subdomain.pod namespace.svc.cluster domain(Defailt nothing)"
tag[22.103]="1"
spec[22.104]="hostAliases:"
value[22.104]="optional list of hosts and IPs that will be injected into the pod's hosts file if specified"
tag[22.104]="0"
spec[22.1041]="hostnames:"
value[22.1041]="Hostnames for the above IP address"
tag[22.1041]="1"
spec[22.1042]="ip:"
value[22.1042]="IP address of the host file entry"
tag[22.1042]="1"
spec[22.105]="dnsConfig:"
value[22.105]="DNS parameters of a pod"
tag[22.105]="0"
spec[22.1051]="nameservers:"
value[22.1051]="DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy"
tag[22.1051]="1"
spec[22.1052]="options:"
value[22.1052]="list of DNS resolver options. This will be merged with the base options generated from DNSPolicy"
tag[22.1052]="1"
spec[22.10521]="name:"
value[22.10521]="PodDNSConfigOption Name"
tag[22.10521]="1"
spec[22.10522]="value:"
value[22.10522]="PodDNSConfigOption Value"
tag[22.10522]="1"
spec[22.1053]="searches:"
value[22.1053]="DNS search domains for host-name lookup"
tag[22.1053]="1"
spec[22.106]="dnsPolicy:"
value[22.106]="DNS policy for the pod. Defaults to ClusterFirst. values(ClusterFirstWithHostNet/ClusterFirst/Default/None)"
tag[22.106]="1"
spec[23.101]="hostNetwork:"
value[23.101]="spec for PODS host-details- Host networking requested for this pod. Use the host's network namespace(Boolean default-false)"
tag[23.101]="1"
spec[23.102]="hostPID:"
value[23.102]="host's pid namespace.(Boolean default-false)"
tag[23.102]="1"
spec[23.103]="hostIPC:"
value[23.103]="host's ipc namespace(Boolean default-false)"
tag[23.103]="1"
spec[23.104]="shareProcessNamespace:"
value[23.104]="Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod(Boolean default-false)"
tag[23.104]="1"
spec[23.105]="serviceAccountName:"
value[23.105]="the name of the ServiceAccount to use to run this pod"
tag[23.105]="1"
spec[23.105]="automountServiceAccountToken:"
value[23.105]="indicates whether a service account token should be automatically mounted(Boolean)"
tag[23.105]="1"
spec[24.101]="securityContext:"
value[24.101]="spec for PODS secuirty-details- holds pod-level security attributes and common container settings"
tag[24.101]="0"
spec[24.1011]="runAsUser:"
value[24.1011]="The UID to run the entrypoint of the container process(int)"
tag[24.1011]="1"
spec[24.1012]="runAsNonRoot:"
value[24.1012]="container must run as a non-root user(Boolean)"
tag[24.1012]="1"
spec[24.1013]="runAsGroup:"
value[24.1013]="GID to run the entrypoint of the container process(int)"
tag[24.1013]="1"
spec[24.1014]="supplementalGroups:"
value[24.1014]="list of groups applied to the first process run in each container(int)"
tag[24.1014]="1"
spec[24.1015]="fsGroup:"
value[24.1015]="special supplemental group that applies to all containers in a pod"
tag[24.1015]="1"
spec[24.1016]="fsGroupChangePolicy:"
value[24.1016]="defines behavior of changing ownership and permission of the volume before being exposed inside Pod(OnRootMismatch/Always)"
tag[24.1016]="1"
spec[24.1017]="seccompProfile:"
value[24.1017]="seccomp options to use by the containers in this pod"
tag[24.1017]="0"
spec[24.10171]="type:"
value[24.10171]="indicates which kind of seccomp profile will be applied(Localhost/RuntimeDefault/Unconfined)"
tag[24.10171]="1"
spec[24.10172]="localhostProfile:"
value[24.10172]="indicates a profile defined in a file on the node should be used(string)"
tag[24.10172]="1"
spec[24.1018]="seLinuxOptions:"
value[24.1018]="SELinux context to be applied to all containers"
tag[24.1018]="1"
spec[24.10181]="level:"
value[24.10181]="SELinux level label that applies to the container"
tag[24.10181]="1"
spec[24.10182]="role:"
value[24.10182]="SELinux role label that applies to the container"
tag[24.10182]="1"
spec[24.10183]="type:"
value[24.10183]="SELinux type label that applies to the container"
tag[24.10183]="1"
spec[24.10184]="user:"
value[24.10184]="SELinux user label that applies to the container"
tag[24.10184]="1"
spec[24.1019]="sysctls:"
value[24.1019]="Sysctls hold a list of namespaced sysctls used for the pod"
tag[24.1019]="0"
spec[24.10191]="name:"
value[24.10191]="Name of a property to set(Sysctl defines a kernel parameter to be set)"
tag[24.10191]="1"
spec[24.10192]="value:"
value[24.10192]="Value of a property to set(Sysctl defines a kernel parameter to be set)"
tag[24.10192]="1"
spec[24.1020]="windowsOptions:"
value[24.1020]="Windows specific settings applied to all containers."
tag[24.1020]="0"
spec[24.10201]="hostProcess:"
value[24.10201]="HostProcess determines if a container should be run as a Host Process container(Boolean)"
tag[24.10201]="1"
spec[24.10202]="runAsUserName:"
value[24.10202]="UserName in Windows to run the entrypoint of the container process."
tag[24.10202]="1"
spec[25.101]="initContainers:"
value[25.101]="spec for init-containers- The init container details for the Pod if any"
tag[25.101]="0"
spec[25.102]="- name:"
value[25.102]="The name for the init container"
tag[25.102]="1"
spec[25.1021]="image:"
value[25.1021]="The init container image"
tag[25.1021]="1"
spec[25.1022]="command:"
value[25.1022]="The command to be executed for the init container"
tag[25.1022]="1"
spec[25.1023]="volumeMounts:"
value[25.1023]="The volume mounts for the init container"
tag[25.1023]="0"
spec[25.1024]="- name:"
value[25.1024]="Name of the volume mount in init container in the format mountpoints;mountpath"
tag[25.1024]="1"
spec[25.10241]="mountPath:"
value[25.10241]="The mountpath for the volume mount of init container"
tag[25.10241]="0"
spec[26.100]="containers:"
value[26.100]="Spec for containers"
tag[26.100]="0"
spec[26.101]="- name:"
value[26.101]="Name of the container"
tag[26.101]="1"
spec[26.1011]="image:"
value[26.1011]="Container image name"
tag[26.1011]="1"
spec[26.1012]="imagePullPolicy:"
value[26.1012]="Image pull policy(Always"
tag[26.1012]="Never"
spec[26.1013]="command:"
value[26.1013]="Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided"
tag[26.1013]="1"
spec[26.1014]="args:"
value[26.1014]="Arguments to the entrypoint. The container image's CMD is used if this is not provided"
tag[26.1014]="1"
spec[26.1015]="workingDir:"
value[26.1015]="Container's working directory.(Default-the container runtime's default will be used)"
tag[26.1015]="1"
spec[26.1016]="env:"
value[26.1016]="List of environment variables to set in the container"
tag[26.1016]="0"
spec[26.10161]="name:"
value[26.10161]="Name of the environment variable"
tag[26.10161]="1"
spec[26.10162]="value:"
value[26.10162]="are expanded using the previously defined environment variables in the container and any service environment variables"
tag[26.10162]="1"
spec[26.10163]="valueFrom:"
value[26.10163]="Source for the environment variable's value. Cannot be used if value is not empty."
tag[26.10163]="0"
spec[26.101631]="configMapKeyRef:"
value[26.101631]="Selects a key from a ConfigMap"
tag[26.101631]="0"
spec[26.1016311]="key:"
value[26.1016311]="configMapKeyRef key to select"
tag[26.1016311]="1"
spec[26.1016312]="name:"
value[26.1016312]="configMapKeyRef Name of the referent"
tag[26.1016312]="1"
spec[26.1016313]="optional:"
value[26.1016313]="Specify whether the ConfigMap or its key must be defined(Boolean)"
tag[26.1016313]="1"
spec[26.101632]="fieldRef:"
value[26.101632]="Selects a field of the pod(supports metadata.name/metadata.namespace/metadata.labels/status.podIPs)"
tag[26.101632]="1"
spec[26.101633]="resourceFieldRef:"
value[26.101633]="Selects a resource of the container(linits Request are supported)"
tag[26.101633]="1"
spec[26.101634]="secretKeyRef:"
value[26.101634]="Selects a key of a secret in the pod's namespace"
tag[26.101634]="0"
spec[26.1016341]="key:"
value[26.1016341]="key of the secret to select from"
tag[26.1016341]="1"
spec[26.1016342]="name:"
value[26.1016342]="Name of the referent of secretKeyRef"
tag[26.1016342]="1"
spec[26.1016343]="optional:"
value[26.1016343]="Specify whether secretKeyRef's Secret or its key must be defined"
tag[26.1016343]="1"
spec[26.1017]="envFrom:"
value[26.1017]="EnvFromSource represents the source of a set of ConfigMap"
tag[26.1017]="0"
spec[26.10171]="configMapRef:"
value[26.10171]="ConfigMap to select from"
tag[26.10171]="0"
spec[26.101711]="name:"
value[26.101711]="ConfigMap name to select from"
tag[26.101711]="1"
spec[26.101712]="optional:"
value[26.101712]="Specify whether the ConfigMap must be defined(Boolean)"
tag[26.101712]="1"
spec[26.10172]="prefix:"
value[26.10172]="An optional identifier to prepend to each key in the ConfigMap"
tag[26.10172]="0"
spec[26.10173]="secretRef:"
value[26.10173]="*SecretEnvSource selects a Secret to populate the environment variables with."
tag[26.10173]="0"
spec[26.101731]="name:"
value[26.101731]="SecretEnvSource name"
tag[26.101731]="1"
spec[26.101732]="optional:"
value[26.101732]="Specify whether the Secret must be defined(Boolean)"
tag[26.101732]="1"
spec[26.1018]="ports:"
value[26.1018]="List of ports to expose from the container"
tag[26.1018]="0"
spec[26.10181]="- containerPort:"
value[26.10181]="Port number to expose on the pods IP address(o-65536)"
tag[26.10181]="1"
spec[26.101812]="hostIP:"
value[26.101812]="host IP to bind the external port to."
tag[26.101812]="1"
spec[26.101813]="hostPort:"
value[26.101813]="port number to expose on the host(If HostNetwork is specified"
tag[26.101813]="1"
spec[26.101814]="name:"
value[26.101814]="Each named port in a pod must have a unique name"
tag[26.101814]="1"
spec[26.101815]="protocol:"
value[26.101815]="Protocol for port. (UDP/TCP/SCTP Defaults to TCP)"
tag[26.101815]="1"
spec[26.1019]="volumeMounts:"
value[26.1019]="Pod volumes to mount into the container's filesystem"
tag[26.1019]="0"
spec[26.10191]="- name:"
value[26.10191]="Name of the Volume and the mount path enter value as name;path-of-mount here"
tag[26.10191]="1"
spec[26.101911]="mountPath:"
value[26.101911]="Path within the container at which the volume should be mounted. Must not contain colon"
tag[26.101911]="0"
spec[26.101912]="mountPropagation:"
value[26.101912]="determines how mounts are propagated from the host to container and the other way around"
tag[26.101912]="1"
spec[26.101913]="readOnly:"
value[26.101913]="Mount volume value read-only if true"
tag[26.101913]="1"
spec[26.101914]="subPath:"
value[26.101914]="Path within the volume from which the container's volume should be mounted.(Default to root)"
tag[26.101914]="1"
spec[26.101915]="subPathExpr:"
value[26.101915]="Expanded path within the volume from which the container's volume should be mounted."
tag[26.101915]="1"
spec[26.1021]="volumeDevices:"
value[26.1021]="volumeDevices is the list of block devices to be used by the container."
tag[26.1021]="0"
spec[26.10212]="- name:"
value[26.10212]="name must match the name of a persistentVolumeClaim in the pod"
tag[26.10212]="1"
spec[26.10213]="devicePath:"
value[26.10213]="devicePath is the path inside of the container that the device will be mapped to"
tag[26.10213]="1"
spec[27.1022]="resources:"
value[27.1022]="Spec for containers with setting resource limits- Compute Resources required by this container"
tag[27.1022]="0"
spec[27.10221]="- claims:"
value[27.10221]="Claims lists the names of resources defined in spec.resourceClaims that are used by this container"
tag[27.10221]="0"
spec[27.102211]="name:"
value[27.102211]="Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used"
tag[27.102211]="1"
spec[27.10222]="limits:"
value[27.10222]="Limits describes the maximum amount of compute resources allowed"
tag[27.10222]="0"
spec[27.10223]="requests:"
value[27.10223]="Requests describes the minimum amount of compute resources required"
tag[27.10223]="0"
spec[27.1025]="resizePolicy:"
value[27.1025]="Resources resize policy for the container"
tag[27.1025]="0"
spec[27.10251]="- resourceName:"
value[27.10251]="Name of the resource to which this resource resize policy applies(cpu/memory)"
tag[27.10251]="1"
spec[27.10252]="restartPolicy:"
value[27.10252]="Restart policy to apply when specified resource is resized"
tag[27.10252]="1"
spec[27.1027]="lifecycle:"
value[27.1027]="Lifecycle describes actions that the management system should take in response to container lifecycle events"
tag[27.1027]="0"
spec[27.10271]="- postStart:"
value[27.10271]="PostStart is called immediately after a container is created. If the handler fails the container is terminated and restarted according to its restart policy"
tag[27.10271]="0"
spec[27.10272]="preStop:"
value[27.10272]="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure"
tag[27.10272]="0"
spec[27.1029]="terminationMessagePath:"
value[27.1029]="Path at which file to which the container's termination message will be written is mounted into the container's filesystem"
tag[27.1029]="1"
spec[27.1030]="terminationMessagePolicy:"
value[27.1030]="Indicate how the termination message should be populated"
tag[27.1030]="1"
spec[27.1031]="livenessProbe:"
value[27.1031]="Periodic probe of container liveness"
tag[27.1031]="1"
spec[27.1032]="readinessProbe:"
value[27.1032]="Periodic probe of container service readiness"
tag[27.1032]="1"
spec[27.1033]="startupProbe:"
value[27.1033]="StartupProbe indicates that the Pod has successfully initialized. If specified then no other probes are executed until this completes successfully"
tag[27.1033]="1"
spec[27.1034]="securityContext:"
value[27.1034]="SecurityContext holds security configuration that will be applied to a container."
tag[27.1034]="0"
spec[27.10341]="- runAsUser:"
value[27.10341]="The UID to run the entrypoint of the container process"
tag[27.10341]="1"
spec[27.10342]="runAsNonRoot:"
value[27.10342]="Indicates that the container must run as a non-root user(Boolean)"
tag[27.10342]="1"
spec[27.10343]="runAsGroup:"
value[27.10343]="GID to run the entrypoint of the container process(int)"
tag[27.10343]="1"
spec[27.10344]="readOnlyRootFilesystem:"
value[27.10344]="Whether this container has a read-only root filesystem(Boolean)"
tag[27.10344]="1"
spec[27.10354]="procMount:"
value[27.10354]="type of proc mount to use for the containers(string)"
tag[27.10354]="1"
spec[27.10355]="privileged:"
value[27.10355]="Run container in privileged mode(priviliged)"
tag[27.10355]="1"
spec[27.10356]="allowPrivilegeEscalation:"
value[27.10356]="AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process(Boolean)"
tag[27.10356]="1"
spec[27.10357]="capabilities:"
value[27.10357]="Adds and removes POSIX capabilities from running containers."
tag[27.10357]="0"
spec[27.103571]="- add:"
value[27.103571]="Adds POSIX capabilities"
tag[27.103571]="1"
spec[27.103572]="drop:"
spec[27.10359]="seccompProfile:"
value[27.10359]="SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set"
tag[27.10359]="0"
spec[27.103591]="- type:"
value[27.103591]="type indicates which kind of seccomp profile will be applied(localhost/RuntimeDefault/Unconfined)"
tag[27.103591]="1"
spec[27.1035911]="localhostProfile:"
value[27.1035911]="localhostProfile indicates a profile defined in a file on the node should be used"
tag[27.1035911]="1"
spec[27.10361]="seLinuxOptions:"
value[27.10361]="SELinux context to be applied to the container"
tag[27.10361]="0"
spec[27.103611]="- level:"
value[27.103611]="Level is SELinux level label that applies to the container(string)"
tag[27.103611]="1"
spec[27.1036111]="role:"
value[27.1036111]="Role is a SELinux role label that applies to the container(string)"
tag[27.1036111]="1"
spec[27.1036112]="type:"
value[27.1036112]="Type is a SELinux type label that applies to the container(string)"
tag[27.1036112]="1"
spec[27.1036113]="user:"
value[27.1036113]="User is a SELinux user label that applies to the container(string)"
tag[27.1036113]="1"
spec[27.10363]="windowsOptions:"
value[27.10363]="WindowsSecurityContextOptions contain Windows-specific options and credentials"
tag[27.10363]="1"
spec[27.103631]="- hostProcess:"
value[27.103631]="HostProcess determines if a container should be run as a 'Host Process' container(Boolean)"
tag[27.103631]="1"
spec[27.103632]="runAsUserName:"
value[27.103632]="UserName in Windows to run the entrypoint of the container process(string)"
tag[27.103632]="1"
spec[28.100]="ephemeralContainers:"
value[28.100]="Spec for The ephemeral containers starts here"
tag[28.100]="0"
spec[28.101]="- name:"
value[28.101]="Name of the ephemeral container(unique among all containers/init-containers and ephemeral containers)"
tag[28.101]="1"
spec[28.1011]="targetContainerName:"
value[28.1011]="Name of the container from PodSpec that this ephemeral container targets"
tag[28.1011]="1"
spec[28.1012]="image:"
value[28.1012]="Container image name"
tag[28.1012]="1"
spec[28.1013]="imagePullPolicy:"
value[28.1013]="Always/Never/IfNotPresent"
tag[28.1013]="1"
spec[28.1014]="command:"
value[28.1014]="Entrypoint array"
tag[28.1014]="1"
spec[28.1015]="args:"
value[28.1015]="either this or cmd"
tag[28.1015]="1"
spec[28.1016]="workingDir:"
value[28.1016]="containers working directory"
tag[28.1016]="1"
spec[28.1017]="env:"
value[28.1017]="List of environment variables to set in the container"
tag[28.1017]="0"
spec[28.10171]="name:"
value[28.10171]="Name of the environment variable"
tag[28.10171]="1"
spec[28.10172]="value:"
value[28.10172]="are expanded using the previously defined environment variables in the container and any service environment variables"
tag[28.10172]="1"
spec[28.10173]="valueFrom:"
value[28.10173]="Source for the environment variable's value. Cannot be used if value is not empty."
tag[28.10173]="0"
spec[28.101731]="configMapKeyRef:"
value[28.101731]="Selects a key from a ConfigMap"
tag[28.101731]="0"
spec[28.1017311]="key:"
value[28.1017311]="configMapKeyRef key to select"
tag[28.1017311]="1"
spec[28.1017312]="name:"
value[28.1017312]="configMapKeyRef Name of the referent"
tag[28.1017312]="1"
spec[28.1017313]="optional:"
value[28.1017313]="Specify whether the ConfigMap or its key must be defined(Boolean)"
tag[28.1017313]="1"
spec[28.101732]="fieldRef:"
value[28.101732]="Selects a field of the pod(supports metadata.name/metadata.namespace/metadata.labels/status.podIPs)"
tag[28.101732]="1"
spec[28.101733]="resourceFieldRef:"
value[28.101733]="Selects a resource of the container(linits Request are supported)"
tag[28.101733]="1"
spec[28.101734]="secretKeyRef:"
value[28.101734]="Selects a key of a secret in the pod's namespace"
tag[28.101734]="0"
spec[28.1017341]="key:"
value[28.1017341]="key of the secret to select from"
tag[28.1017341]="1"
spec[28.1017342]="name:"
value[28.1017342]="Name of the referent of secretKeyRef"
tag[28.1017342]="1"
spec[28.1017343]="optional:"
value[28.1017343]="Specify whether secretKeyRef's Secret or its key must be defined"
tag[28.1017343]="1"
spec[28.1018]="envFrom:"
value[28.1018]="EnvFromSource represents the source of a set of ConfigMap"
tag[28.1018]="0"
spec[28.10181]="configMapRef:"
value[28.10181]="ConfigMap to select from"
tag[28.10181]="0"
spec[28.101811]="name:"
value[28.101811]="ConfigMap name to select from"
tag[28.101811]="1"
spec[28.101812]="optional:"
value[28.101812]="Specify whether the ConfigMap must be defined(Boolean)"
tag[28.101812]="1"
spec[28.10182]="prefix:"
value[28.10182]="An optional identifier to prepend to each key in the ConfigMap"
tag[28.10182]="0"
spec[28.10183]="secretRef:"
value[28.10183]="SecretEnvSource selects a Secret to populate the environment variables with."
tag[28.10183]="0"
spec[28.101831]="name:"
value[28.101831]="SecretEnvSource name"
tag[28.101831]="1"
spec[28.101832]="optional:"
value[28.101832]="Specify whether the Secret must be defined(Boolean)"
tag[28.101832]="1"
spec[28.1020]="volumeMounts:"
value[28.1020]="Pod volumes to mount into the container's filesystem"
tag[28.1020]="0"
spec[28.10201]="- name:"
value[28.10201]="Name of the Volume and the mount path enter value as name;path-of-mount here"
tag[28.10201]="1"
spec[28.102011]="mountPath:"
value[28.102011]="Path within the container at which the volume should be mounted"
tag[28.102011]="1"
spec[28.102012]="mountPropogation:"
value[28.102012]="mountPropagation determines how mounts are propagated from the host to container and the other way around."
tag[28.102012]="1"
spec[28.102013]="readOnly:"
value[28.102013]="Mounted read-only if true"
tag[28.102013]=" read-write otherwise (false or unspecified)."
spec[28.102014]="subPathExpr:"
value[28.102014]="Behaves similarly to SubPath but environment variable references (VAR_NAME) are expanded using the container's environment"
tag[28.102014]="1"
spec[28.1021]="volumeDevices:"
value[28.1021]="is the list of block devices to be used by the container"
tag[28.1021]="0"
spec[28.10212]="- name:"
value[28.10212]="name must match the name of a persistentVolumeClaim in the pod"
tag[28.10212]="1"
spec[28.102121]="devicePath:"
value[28.102121]="path inside of the container that the device will be mapped to"
tag[28.102121]="1"
spec[28.1031]="resizePolicy:"
value[28.1031]="Resources resize policy for the container"
tag[28.1031]="0"
spec[28.10311]="resourcesName:"
value[28.10311]="Name of the resource to which this resource resize policy applies(cpu/memory)"
tag[28.10311]="1"
spec[28.1033]="terminationMessagePath:"
value[28.1033]="Path at which the file to which the container's termination message will be written is mounted into the container's filesystem"
tag[28.1033]="1"
spec[28.1034]="terminationMessagePolicy:"
value[28.1034]="Indicate how the termination message should be populated"
tag[28.1034]="1"
spec[28.1036]="stdin:"
value[28.1036]="Whether this container should allocate a buffer for stdin in the container runtime(boolean)"
tag[28.1036]="1"
spec[28.1037]="stdinOnce:"
value[28.1037]="Whether the container runtime should close the stdin channel after it has been opened by a single attach(boolean)"
tag[28.1037]="1"
spec[28.1039]="tty:"
value[28.1039]="Whether this container should allocate a TTY for itself"
tag[28.1039]="1"
spec[28.1042]="securityContext:"
value[28.1042]=" SecurityContext defines the security options the ephemeral container should be run with"
tag[28.1042]="0"
spec[28.10421]="runAsUser:"
value[28.10421]="UID to run the entrypoint of the container process"
tag[28.10421]="1"
spec[28.10422]="runAsNonRoot:"
value[28.10422]="Indicates that the container must run as a non-root user"
tag[28.10422]="1"
spec[28.10423]="runAsGroup:"
value[28.10423]="GID to run the entrypoint of the container process"
tag[28.10423]="1"
spec[28.10424]="readOnlyRootFilesystem:"
value[28.10424]="Whether this container has a read-only root filesystem(boolean)"
tag[28.10424]="1"
spec[28.10425]="procMount:"
value[28.10425]="procMount denotes the type of proc mount to use for the containers"
tag[28.10425]="1"
spec[28.10426]="privileged:"
value[28.10426]="Run container in privileged mode"
tag[28.10426]="1"
spec[28.10427]="allowPrivilegeEscalation:"
value[28.10427]="controls whether a process can gain more privileges than its parent process(boolean)"
tag[28.10427]="1"
spec[28.10428]="capabilities:"
value[28.10428]="capabilities to add/drop when running containers"
tag[28.10428]="0"
spec[28.104281]="add:"
value[28.104281]="add capabilities"
tag[28.104281]="1"
spec[28.104282]="drop:"
value[28.104282]="remove capabilities"
tag[28.104282]="1"
spec[28.10429]="seccompProfile:"
value[28.10429]="seccomp options to use by this container"
tag[28.10429]="0"
spec[28.104291]="type:"
value[28.104291]="Valid options are(localhost/runtimedefault/Unconfied)"
tag[28.104291]="1"
spec[28.104292]="localhostProfile:"
value[28.104292]="indicates a profile defined in a file on the node should be used"
tag[28.104292]="1"
spec[28.10430]="seLinuxOptions:"
value[28.10430]="If unspecified the container runtime will allocate a random SELinux context for each container"
tag[28.10430]="0"
spec[28.104301]="level:"
value[28.104301]="SELinux level label that applies to the container"
tag[28.104301]="1"
spec[28.104302]="role:"
value[28.104302]="SELinux role label that applies to the container"
tag[28.104302]="1"
spec[28.104303]="type:"
value[28.104303]="SELinux type label that applies to the container"
tag[28.104303]="1"
spec[28.104304]="user:"
value[28.104304]="SELinux user label that applies to the container"
tag[28.104304]="1"
spec[28.10431]="windowsOptions:"
value[28.10431]="If unspecified the options from the PodSecurityContext will be used"
tag[28.10431]="0"
spec[28.104311]="gmsaCredentialSpec:"
value[28.104311]="GMSACredentialSpec is where the GMSA admission webhook"
tag[28.104311]="1"
spec[28.104312]="gmsaCredentialSpecName:"
value[28.104312]="GMSA credential spec to use"
tag[28.104312]="1"
spec[28.104313]="hostProcess:"
value[28.104313]=" if a container should be run as a 'Host Process' container(boolean)"
tag[28.104313]="1"
spec[28.104314]="runAsUserName:"
value[28.104314]="UserName in Windows to run the entrypoint of the container process"
tag[28.104314]="1"
spec[29.100]="volumes:"
value[29.100]="Spec for various Volumes in PODS- List of volumes that can be mounted by containers belonging to the pod; Persistent Volume Claim"
tag[29.100]="0"
spec[29.1001]="- name:"
value[29.1001]="spec for  persistent Volume claim"
tag[29.1001]="1"
spec[29.10011]="persistentVolumeClaim:"
value[29.10011]="The persistenVolumeCalim that was created"
tag[29.10011]="0"
spec[29.100111]="claimName:"
value[29.100111]="The Persistent claim name"
tag[29.100111]="1"
spec[30.1002]="- name:"
value[30.1002]="spec for Volume Configmap Volume"
tag[30.1002]="1"
spec[30.10021]="configMap:"
value[30.10021]="The ConfigMap details"
tag[30.10021]="0"
spec[30.100211]="name:"
value[30.100211]="In the options you have chosen Configmap pls enter the value as name;defaultmode here"
tag[30.100211]="1"
spec[30.100212]="defaultMode:"
value[30.100212]="The mode of access"
tag[30.100212]="0"
spec[31.1003]="- name:"
value[31.1003]="spec for Volume hostmap"
tag[31.1003]="1"
spec[31.10031]="hostPath:"
value[31.10031]="A hostPath volume mounts a file or directory from the host node's filesystem into your Pod"
tag[31.10031]="0"
spec[31.100311]="path:"
value[31.100311]="The valid path of the localhost"
tag[31.100311]="1"
spec[31.100312]="type:"
value[31.100312]="The valid entries are(File/Directory/socket/BlockDevice/charDevice/FilelOrCreate/DirectoryOrCreate/empty)"
tag[31.100312]="1"
spec[32.1004]="- name"
value[32.1004]="spec for Volume gitrepo volume "
tag[32.1004]="1"
spec[32.10041]="gitRepo:"
value[32.10041]="The gitRepo details"
tag[32.10041]="0"
spec[32.100411]="repository:"
value[32.100411]="The git repo is a string"
tag[32.100411]="1"
spec[32.100412]="revision:"
value[32.100412]="The revision is a string"
tag[32.100412]="1"
spec[33.1004]="- name"
value[33.1004]="spec for NFS- NFS volume associated with pod that can be used by  Container-s"
tag[33.1004]="1"
spec[33.10041]="nfs:"
spec[33.10411]="server:"
value[33.10411]="The nfs server details"
tag[33.10411]="1"
spec[33.10412]="path:"
value[33.10412]="The nfs path"
tag[33.10412]="1"
spec[33.10413]="readOnly:"
value[33.10413]="The boolean value"
tag[33.10413]="1"
spec[34.1004]="- name"
value[34.1004]="spec for cephfs volume assoicated with pod that can be used by  Container-s"
tag[34.1004]="1"
spec[34.10041]="cephfs:"
value[34.10041]="The cephfs deatils"
tag[34.10041]="0"
spec[34.100411]="monitors:"
value[34.100411]="The ip adress details in here"
tag[34.100411]="1"
spec[34.100412]="user:"
value[34.100412]="The authorized user login"
tag[34.100412]="1"
spec[34.100413]="secretFile:"
value[34.100413]="The path of the cephfs secret file"
tag[34.100413]="1"
spec[34.100414]="readOnly:"
value[34.100414]="The boolean value for read"
tag[34.100414]="1"
spec[35.1004]="- name"
value[35.1004]="spec for csi volume assoicated with pod that can be used by  Container-s"
tag[35.1004]="1"
spec[35.10041]="csi:"
value[35.10041]="The out-of-tree csi driver details"
tag[35.10041]="0"
spec[35.100411]="driver:"
value[35.100411]="A string value that specifies the name of the volume driver to use"
tag[35.100411]="1"
spec[35.100412]="volumeAttributes:"
value[35.100412]="A map of string to string that specifies static properties of a volume"
tag[35.100412]="1"
spec[35.100413]="volumeHandle:"
value[35.100413]="A string value that uniquely identifies the volume"
tag[35.100413]="1"
spec[35.100414]="fsType:"
value[35.100414]="the fstype Volume Filesystem  to specify"
tag[35.100414]="1"
spec[35.100415]="nodePublishSecretRef:"
value[35.100415]="A reference to the secret object containing sensitive information to pass"
tag[35.100415]="1"
spec[35.100416]="nodeStageSecretRef:"
value[35.100416]="A reference to the secret object containing sensitive information to pass to the CSI driver"
tag[35.100416]="1"
spec[36.1004]="- name"
value[36.1004]="spec for the rd block device volume assoicated with pod that can be used by  Container-s"
tag[36.1004]="1"
spec[36.10041]="rbd:"
value[36.10041]="The raw block device details"
tag[36.10041]="0"
spec[36.100411]="monitors:"
value[36.100411]="The ip adress details in here"
tag[36.100411]="1"
spec[36.100412]="pool:"
value[36.100412]="The pool details"
tag[36.100412]="1"
spec[36.100413]="image:"
value[36.100413]="The os image details"
tag[36.100413]="1"
spec[36.100414]="fsType:"
value[36.100414]="The file system type"
tag[36.100414]="1"
spec[36.100415]="readOnly:"
value[36.100415]="The access rights for the raw block volume"
tag[36.100415]="1"
spec[36.100416]="user:"
value[36.100416]="The authorized user login"
tag[36.100416]="1"
spec[36.100417]="keyring:"
value[36.100417]="The key ring path"
tag[36.100417]="1"
spec[36.100418]="imageformat:"
value[36.100418]="The image format numerical vale"
tag[36.100418]="1"
spec[36.100419]="imagefeatures:"
value[36.100419]="The image feature(layering etc)"
tag[36.100419]="1"
spec[37]="spec:"
value[37]="Gateway Class specs"
tag[37]="0"
spec[37.1]="controllerName:"
value[37.1]="ControllerName is the name of the controller that is managing Gateways of this class(example.net/gateway-controller)"
tag[37.1]="1"
spec[37.2]="parametersRef:"
value[37.2]="configuration parameters corresponding to the GatewayClass"
tag[37.2]="1"
spec[37.21]="- name:"
value[37.21]="Name of the referant"
tag[37.21]="1"
spec[37.211]="kind:"
value[37.211]="kind of the referant"
tag[37.211]="1"
spec[37.212]="group:"
value[37.212]="group of the referent"
tag[37.212]="1"
spec[37.213]="namespace:"
value[37.213]="Namespaces (optional)"
tag[37.213]="1"
spec[37.3]="description:"
value[37.3]="helps describe a GatewayClass with more details"
tag[37.3]="1"
spec[38]="spec:"
value[38]="Gateway specs"
tag[38]="0"
spec[38.1]="gatewayClassName:"
value[38.1]="This is the name of a GatewayClass resource"
tag[38.1]="1"
spec[38.2]="listeners:"
value[38.2]="listener in a Gateway must have a unique combination of Hostname"
tag[38.2]="0"
spec[38.3]="- name:"
value[38.3]="The combo of (name;port;protocol FOR more than 1 listener seperate by comma)"
tag[38.3]="1"
spec[38.31]="port:"
value[38.31]="The numeric protocol number"
tag[38.31]="1"
spec[38.32]="protocol:"
value[38.32]="The protocol(TCP/UDP/http..)"
tag[38.32]="1"
spec[38.33]="tls:"
value[38.33]="TLS config"
tag[38.33]="1"
spec[38.331]="mode:"
value[38.331]="TLS behavior for TLS session(Terminate/Passthrough)"
tag[38.331]="1"
spec[38.332]="certificateRefs:"
value[38.332]="series of references to k8s objects that contain TLS certs"
tag[38.332]="1"
spec[38.3321]="- name:"
value[38.3321]="is the name of certificateRefs"
tag[38.3321]="1"
spec[38.33211]="kind:"
value[38.33211]="Kind is kind of certificateRefs"
tag[38.33211]="1"
spec[38.33212]="group:"
value[38.33212]="is the group of the certificateRefs"
tag[38.33212]="1"
spec[38.33213]="namespace:"
value[38.33213]="Namespace of the certificateRefs"
tag[38.33213]="1"
spec[38.333]="options:"
value[38.333]="List of key/value pairs"
tag[38.333]="1"
spec[38.34]="allowedRoutes:"
value[38.34]="Defines type oflisteners that can be attached"
tag[38.34]="0"
spec[38.341]="namespaces:"
value[38.341]="Namespaces indicates namespaces from which Routes may be attached to this Listener"
tag[38.341]="1"
spec[38.3411]="from:"
value[38.3411]="indicates where Routes will be selected for this Gateway(All/Same/Selector)"
tag[38.3411]="1"
spec[38.3412]="selector:"
value[38.3412]="Selector must be specified when From is set to (Selector)"
tag[38.3412]="0"
spec[38.34121]="matchLabels:"
value[38.34121]="Match labels"
tag[38.34121]="0"
spec[38.341211]="expose-apps:"
value[38.341211]="Apps to expose(boolean)"
tag[38.341211]="1"
spec[38.342]="kinds:"
value[38.342]="specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener"
tag[38.342]="0"
spec[38.3421]="- kind:"
value[38.3421]="The kind value"
tag[38.3421]="1"
spec[38.34211]="group:"
value[38.34211]="Group of the route"
tag[38.34211]="1"
spec[38.35]="hostname:"
value[38.35]="specifies the virtual hostname to match for protocol types that define this concept"
tag[38.35]="1"
spec[38.6]="addresses:"
value[38.6]="Addresses field represents a request for the address(es) on the (outside of the Gateway) that traffic bound for this Gateway will use"
tag[38.6]="0"
spec[38.61]="- value:"
value[38.61]="value of address"
tag[38.61]="1"
spec[38.611]="type:"
value[38.611]="type of addess(hostname/ipaddress)"
tag[38.611]="1"
spec[39]="spec:"
value[39]="Spec defines the desired state of HTTPRoute(CommonRouteSpec embedded)"
tag[39]="0"
spec[39.1]="parentRefs:"
value[39.1]="references the resources (usually Gateways) that a Route wants to be attached to"
tag[39.1]="0"
spec[39.2]="- name:"
value[39.2]="THe name for this parentrefs"
tag[39.2]="1"
spec[39.21]="kind:"
value[39.21]="The valide values are(Gateway/Service)"
tag[39.21]="1"
spec[39.22]="port:"
value[39.22]="is the network port this Route targets"
tag[39.22]="1"
spec[39.23]="sectionName:"
value[39.23]="name of a section in a Kubernetes resource(invalid values are /)"
tag[39.23]="1"
spec[39.24]="namespace:"
value[39.24]="The namespaces that needs to appear"
tag[39.24]="1"
spec[39.25]="group:"
value[39.25]="When unspecified (gateway.networking.k8s.io) is inferred"
tag[39.25]="1"
spec[39.3]="hostnames:"
value[39.3]="Valid hostnames"
tag[39.3]="1"
spec[39.4]="rules:"
value[39.4]="Rules are a list of HTTP matchers filters and actions"
tag[39.4]="0"
spec[39.41]="- backendRefs:"
value[39.41]="backendRefs for the Rules"
tag[39.41]="0"
spec[39.411]="- name:"
value[39.411]="The name for this backend refs"
tag[39.411]="1"
spec[39.4111]="weight:"
value[39.4111]="Weight specifies the proportion of requests forwarded to the referenced backend"
tag[39.4111]="1"
spec[39.4112]="port:"
value[39.4112]="The port number for backendRefs"
tag[39.4112]="1"
spec[39.4113]="kind:"
value[39.4113]="The kind for the backendRefs"
tag[39.4113]="1"
spec[39.4114]="group:"
value[39.4114]="The group for the backendRefs"
tag[39.4114]="1"
spec[39.42]="- matches:"
value[39.42]="Matched defined condition"
tag[39.42]="0"
spec[39.421]="- path:"
value[39.421]="specifies a HTTP request path matcher(default /)"
tag[39.421]="0"
spec[39.42110]="type:"
value[39.42110]="How to match(Exact/PathPrefix/Regular-expresssion) enter (type;value) for more than one seperate by comma"
tag[39.42110]="1"
spec[39.42112]="value:"
value[39.42112]="The path string value to match"
tag[39.42112]="0"
spec[39.422]="headers:"
value[39.422]="specifies HTTP request header matchers"
tag[39.422]="0"
spec[39.4221]="- name:"
value[39.4221]="name of the header to be matched"
tag[39.4221]="1"
spec[39.42211]="value:"
value[39.42211]="Value of HTTP header to match"
tag[39.42211]="1"
spec[39.42212]="type:"
value[39.42212]="specifies how to match against the value of the query parameter(Exact/RegularExpression)"
tag[39.42212]="1"
spec[39.423]="queryParams:"
value[39.423]="HTTP query parameter matchers. Multiple match values are ANDed together"
tag[39.423]="0"
spec[39.4231]="- name:"
value[39.4231]="name of HTTP query param to match(exact string match req)"
tag[39.4231]="1"
spec[39.42311]="value:"
value[39.42311]="value of HTTP query param to match"
tag[39.42311]="1"
spec[39.42312]="type:"
value[39.42312]="specifies how to match against the value of the query parameter(Exact/RegularExpression)"
tag[39.42312]="1"
spec[39.424]="method:"
value[39.424]="When specified this route will be matched only if the request has the specified method"
tag[39.424]="0"
spec[39.4241]="value:"
value[39.4241]="how to select a HTTP route by matching the HTTP method UPPERCASE(CONNECT/DELETE/GET/HEAD/OPTIONS/PATCH/POST/PUT/TRACE)"
tag[39.4241]="1"
spec[39.43]="- filters:"
value[39.43]="define filters"
tag[39.43]="0"
spec[39.431]="- type:"
value[39.431]="Such as (Core/Extended/Implementation-specific/URL-rewrite/ResponseHeaderModifier etc)"
tag[39.431]="1"
spec[39.4321]="requestHeaderModifier:"
value[39.4321]="defines a schema for a filter that modifies request headers"
tag[39.4321]="0"
spec[39.43211]="set:"
value[39.43211]="Set overwrites the request with the given header in requestHeaderModifier"
tag[39.43211]="0"
spec[39.432111]="- name:"
value[39.432111]="HTTP Header to be matched for set in requestHeaderModifier filter for httpRoute(enter as name;value) as pairs"
tag[39.432111]="1"
spec[39.4321111]="value:"
value[39.4321111]="value of HTTP Header to be matched for set in requestHeaderModifier filter for httpRoute"
tag[39.4321111]="0"
spec[39.43212]="add:"
value[39.43212]="Add adds the given header to the request before the action in requestHeaderModifier "
tag[39.43212]="0"
spec[39.432121]="- name:"
value[39.432121]="HTTP Header to be matched for add in requestHeaderModifier filter for httpRoute (enter as name;value) as pairs"
tag[39.432121]="1"
spec[39.4321211]="value:"
value[39.4321211]="value of HTTP Header to be matched for add in requestHeaderModifier filter for httpRoute"
tag[39.4321211]="0"
spec[39.43213]="remove:"
value[39.43213]="the given header(s) from the HTTP request before the action for requestHeaderModifier in filters of httpRouter rules"
tag[39.43213]="1"
spec[39.4331]="responseHeaderModifier:"
value[39.4331]="defines a schema for a filter that modifies response headers"
tag[39.4331]="0"
spec[39.43311]="set:"
value[39.43311]="Set overwrites the request with the given header in responseHeaderModifier"
tag[39.43311]="0"
spec[39.433111]="- name:"
value[39.433111]="HTTP Header to be matched for set in responseHeaderModifier filter for httpRoute (enter as name;value)"
tag[39.433111]="1"
spec[39.4331111]="value:"
value[39.4331111]="value of HTTP Header to be matched for set in responseHeaderModifier filter for httpRoute"
tag[39.4331111]="0"
spec[39.43312]="add:"
value[39.43312]="Add adds the given header to the request before the action in responseHeaderModifier "
tag[39.43312]="0"
spec[39.433121]="- name:"
value[39.433121]="HTTP Header to be matched for add in responseHeaderModifier filter for httpRoute (enter as name;value)"
tag[39.433121]="1"
spec[39.4331211]="value:"
value[39.4331211]="value of HTTP Header to be matched for add in responseHeaderModifier filter for httpRoute"
tag[39.4331211]="0"
spec[39.43313]="remove:"
value[39.43313]="the given header(s) from the HTTP request before the action for responseHeaderModifier in filters of httpRouter rules"
tag[39.43313]="1"
spec[39.4341]="requestMirror:"
value[39.4341]="Requests are sent to the specified destination"
tag[39.4341]="0"
spec[39.43411]="backendRef:"
value[39.43411]="BackendRef references a resource where mirrored requests are sent"
tag[39.43411]="0"
spec[39.434111]="-name:"
value[39.434111]="the name of the referent requestMirror"
tag[39.434111]="1"
spec[39.4341111]="kind:"
value[39.4341111]="Kubernetes resource kind of the referent requestMirror"
tag[39.4341111]="1"
spec[39.4341112]="group:"
value[39.4341112]="Group is the group of the referent requestMirror"
tag[39.4341112]="1"
spec[39.4341113]="port:"
value[39.4341113]="specifies the destination port number to use for this resource of requestMirror"
tag[39.4341113]="1"
spec[39.4341114]="namespace:"
value[39.4341114]="namespace of the backend requestMirror"
tag[39.4341114]="1"
spec[39.4351]="requestRedirect:"
value[39.4351]="RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection"
tag[39.4351]="0"
spec[39.43511]="path:"
value[39.43511]="Path defines a path rewrite in httpRoute requestRedirect filters"
tag[39.43511]="1"
spec[39.43512]="port:"
value[39.43512]=" port to be used in the value of the Location header in the response requestRedirect filter"
tag[39.43512]="1"
spec[39.43513]="hostname:"
value[39.43513]="hostname to be used in the value of the Location header in the response requestRedirect filter"
tag[39.43513]="1"
spec[39.43514]="scheme:"
value[39.43514]=" is the scheme to be used in the value of the Location header in the response requestRedirect filter"
tag[39.43514]="1"
spec[39.43515]="statusCode:"
value[39.43515]="HTTP status code to be used in response for requestRedirect filter"
tag[39.43515]="1"
spec[39.43516]="type:"
value[39.43516]="type of replaceFullPath/replacePrefixMatch in Requestredirect"
tag[39.43516]="1"
spec[39.435161]="replaceFullPath:"
value[39.435161]="ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirec in httpRoute requestRedirect"
tag[39.435161]="1"
spec[39.435162]="replacePrefixMatch:"
value[39.435162]="ReplacePrefixMatch specifies the value with which to replace the prefix match of a request in httproute requestRedirect filters"
tag[39.435162]="1"
spec[39.4361]="urlRewrite:"
value[39.4361]="URLRewrite defines a schema for a filter that modifies a request during forwarding"
tag[39.4361]="0"
spec[39.43611]="hostname:"
value[39.43611]="Hostname is the value to be used to replace the Host header value during forwarding in httproute URLRewrite filters"
tag[39.43611]="1"
spec[39.43612]="path:"
value[39.43612]="Path defines a path rewrite in httpRoute URLRewrite filters"
tag[39.43612]="1"
spec[39.436121]="type:"
value[39.436121]="type of replaceFullPath/replacePrefixMatch in URLRwrite"
tag[39.436121]="1"
spec[39.4361211]="replaceFullPath:"
value[39.4361211]="ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirec in httpRoute URLRewrite filter"
tag[39.4361211]="1"
spec[39.4361212]="replacePrefixMatch:"
value[39.4361212]="ReplacePrefixMatch specifies the value with which to replace the prefix match of a request in httproute URLRewrite filters"
tag[39.4361212]="1"
spec[39.4371]="extensionRef:"
value[39.4371]="implementation-specific extension to the filter behavior"
tag[39.4371]="0"
spec[39.43711]="- name:"
value[39.43711]=" is the name of the referent extensionRef of filters in httpRoute"
tag[39.43711]="1"
spec[39.437111]="kind:"
value[39.437111]=" kind of the referent extensionRef of filters in httpRoute"
tag[39.437111]="1"
spec[39.437112]="group:"
value[39.437112]=" is the group of the referent extensionRef of filters in httpRoute"
tag[39.437112]="1"
spec[42]="spec:"
value[42]="Spec defines the Cluster Issuer for a Cert-Manager"
tag[42]="0"
spec[42.1]="acme:"
value[42.1]="Automated Certificate Management Environment (ACME) Certificate Authority server validation"
tag[42.1]="0"
spec[42.11]="server:"
value[42.11]="Server details from which the Validation needs to occur"
tag[42.11]="1"
spec[42.12]="email:"
value[42.12]="e-mail registered with your domain that needs the certificate"
tag[42.12]="1"
spec[42.13]="privateKeySecretRef:"
value[42.13]="Private key name refrence"
tag[42.13]="0"
spec[42.131]="name:"
value[42.131]="Private key name"
tag[42.131]="1"
spec[42.14]="solvers:"
value[42.14]="The solvers that needs to be deployed http/DNS"
tag[42.14]="0"
spec[42.15]="- http01:"
value[42.15]="The HTTP solver that needs to be deployed"
tag[42.15]="0"
spec[42.151]="ingress:"
value[42.151]="ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests"
tag[42.151]="0"
spec[42.1511]="serviceType:"
value[42.1511]="Supported values are NodePort or ClusterIP"
tag[42.1511]="1"
spec[42.1512]="ingressClassName:"
value[42.1512]="Only one of class or name or ingressClassName may be specified"
tag[42.1512]="1"
spec[42.1513]="class:"
value[42.1513]="Only one of class or name or ingressClassName may be specified"
tag[42.1513]="1"
spec[42.1514]="name:"
value[42.1514]="Only one of class or name or ingressClassName may be specified"
tag[42.1514]="1"
spec[42.1515]="podTemplate:"
value[42.1515]="pod template used to configure the ACME challenge solver pods used for HTTP01 challenges"
tag[42.1515]="1"
spec[42.15151]="metadata:"
value[42.15151]="ObjectMeta overrides for the pod used to solve HTTP01 challenges"
tag[42.15151]="0"
spec[42.151511]="annotations:"
value[42.151511]="Annotations that should be added to the create ACME HTTP01 solver pods"
tag[42.151511]="1"
spec[42.151512]="labels:"
value[42.151512]="Labels that should be added to the created ACME HTTP01 solver pods"
tag[42.151512]="1"
spec[42.15152]="spec:"
value[42.15152]="defines overrides for the HTTP01 challenge solver pod"
tag[42.15152]="0"
spec[42.151521]="nodeSelector:"
value[42.151521]="Selector which must match a node’s labels for the pod to be scheduled on that node"
tag[42.151521]="1"
spec[42.151522]="affinity:"
value[42.151522]="the pod’s scheduling constraints"
tag[42.151522]="1"
spec[42.151523]="tolerations:"
value[42.151523]="the pod’s tolerations"
tag[42.151523]="1"
spec[42.151524]="priorityClassName:"
value[42.151524]="the pod’s priorityClassName"
tag[42.151524]="1"
spec[42.151525]="serviceAccountName:"
value[42.151525]="the pod’s service account"
tag[42.151525]="1"
spec[42.151526]="imagePullSecrets:"
value[42.151526]="the pod’s imagePullSecrets"
tag[42.151526]="1"
spec[42.152]="gatewayHTTPRoute:"
value[42.152]="Gateway API is a sig-network community API that models service networking in Kubernetes(experimental)"
tag[42.152]="0"
spec[42.1521]="serviceType:"
value[42.1521]="service type for Kubernetes solver service. Supported values are NodePort or ClusterIP"
tag[42.1521]="1"
spec[42.1522]="labels:"
value[42.1522]=" Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges"
tag[42.1522]="1"
spec[42.1523]="parentRefs:"
value[42.1523]="Generally the parentRef references a Gateway"
tag[42.1523]="1"
